; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32f10x_flash.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\IAP -I..\HARDWARE\STMFLASH -I..\HARDWARE\LED -I..\HARDWARE\Tim2 -I..\HARDWARE\IO -I"E:\TH\RTU\RTU¿ª·¢³ÌÐò\IAP-Bootloader V1.0\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_XL -DSTM32F10X_XHD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\stm32f10x_flash.crf ..\STM32F10x_FWLib\src\stm32f10x_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;253      */
;;;254    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;257      
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;260      
;;;261      /* Read the ACR register */
;;;262      tmpreg = FLASH->ACR;  
000004  4afe              LDR      r2,|L1.1024|
000006  6810              LDR      r0,[r2,#0]
;;;263      
;;;264      /* Sets the Latency value */
;;;265      tmpreg &= ACR_LATENCY_Mask;
000008  f0000038          AND      r0,r0,#0x38
;;;266      tmpreg |= FLASH_Latency;
00000c  4308              ORRS     r0,r0,r1
;;;267      
;;;268      /* Write the ACR register */
;;;269      FLASH->ACR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;270    }
000010  4770              BX       lr
;;;271    
                          ENDP

                  FLASH_HalfCycleAccessCmd PROC
;;;280      */
;;;281    void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
000012  49fb              LDR      r1,|L1.1024|
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
;;;285      
;;;286      /* Enable or disable the Half cycle access */
;;;287      FLASH->ACR &= ACR_HLFCYA_Mask;
000014  6809              LDR      r1,[r1,#0]
000016  f0210108          BIC      r1,r1,#8
00001a  4af9              LDR      r2,|L1.1024|
00001c  6011              STR      r1,[r2,#0]
;;;288      FLASH->ACR |= FLASH_HalfCycleAccess;
00001e  4611              MOV      r1,r2
000020  6809              LDR      r1,[r1,#0]
000022  4301              ORRS     r1,r1,r0
000024  6011              STR      r1,[r2,#0]
;;;289    }
000026  4770              BX       lr
;;;290    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;299      */
;;;300    void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
000028  49f5              LDR      r1,|L1.1024|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
;;;304      
;;;305      /* Enable or disable the Prefetch Buffer */
;;;306      FLASH->ACR &= ACR_PRFTBE_Mask;
00002a  6809              LDR      r1,[r1,#0]
00002c  f0210110          BIC      r1,r1,#0x10
000030  4af3              LDR      r2,|L1.1024|
000032  6011              STR      r1,[r2,#0]
;;;307      FLASH->ACR |= FLASH_PrefetchBuffer;
000034  4611              MOV      r1,r2
000036  6809              LDR      r1,[r1,#0]
000038  4301              ORRS     r1,r1,r0
00003a  6011              STR      r1,[r2,#0]
;;;308    }
00003c  4770              BX       lr
;;;309    
                          ENDP

                  FLASH_Unlock PROC
;;;318      */
;;;319    void FLASH_Unlock(void)
00003e  48f1              LDR      r0,|L1.1028|
;;;320    {
;;;321      /* Authorize the FPEC of Bank1 Access */
;;;322      FLASH->KEYR = FLASH_KEY1;
000040  49ef              LDR      r1,|L1.1024|
000042  6048              STR      r0,[r1,#4]
;;;323      FLASH->KEYR = FLASH_KEY2;
000044  48f0              LDR      r0,|L1.1032|
000046  6048              STR      r0,[r1,#4]
;;;324    
;;;325    #ifdef STM32F10X_XL
;;;326      /* Authorize the FPEC of Bank2 Access */
;;;327      FLASH->KEYR2 = FLASH_KEY1;
000048  48ee              LDR      r0,|L1.1028|
00004a  6448              STR      r0,[r1,#0x44]
;;;328      FLASH->KEYR2 = FLASH_KEY2;
00004c  48ee              LDR      r0,|L1.1032|
00004e  6448              STR      r0,[r1,#0x44]
;;;329    #endif /* STM32F10X_XL */
;;;330    }
000050  4770              BX       lr
;;;331    /**
                          ENDP

                  FLASH_UnlockBank1 PROC
;;;339      */
;;;340    void FLASH_UnlockBank1(void)
000052  48ec              LDR      r0,|L1.1028|
;;;341    {
;;;342      /* Authorize the FPEC of Bank1 Access */
;;;343      FLASH->KEYR = FLASH_KEY1;
000054  49ea              LDR      r1,|L1.1024|
000056  6048              STR      r0,[r1,#4]
;;;344      FLASH->KEYR = FLASH_KEY2;
000058  48eb              LDR      r0,|L1.1032|
00005a  6048              STR      r0,[r1,#4]
;;;345    }
00005c  4770              BX       lr
;;;346    
                          ENDP

                  FLASH_UnlockBank2 PROC
;;;353      */
;;;354    void FLASH_UnlockBank2(void)
00005e  48e9              LDR      r0,|L1.1028|
;;;355    {
;;;356      /* Authorize the FPEC of Bank2 Access */
;;;357      FLASH->KEYR2 = FLASH_KEY1;
000060  49e7              LDR      r1,|L1.1024|
000062  6448              STR      r0,[r1,#0x44]
;;;358      FLASH->KEYR2 = FLASH_KEY2;
000064  48e8              LDR      r0,|L1.1032|
000066  6448              STR      r0,[r1,#0x44]
;;;359    
;;;360    }
000068  4770              BX       lr
;;;361    #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_Lock PROC
;;;371      */
;;;372    void FLASH_Lock(void)
00006a  48e5              LDR      r0,|L1.1024|
;;;373    {
;;;374      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;375      FLASH->CR |= CR_LOCK_Set;
00006c  6900              LDR      r0,[r0,#0x10]
00006e  f0400080          ORR      r0,r0,#0x80
000072  49e3              LDR      r1,|L1.1024|
000074  6108              STR      r0,[r1,#0x10]
;;;376    
;;;377    #ifdef STM32F10X_XL
;;;378      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;379      FLASH->CR2 |= CR_LOCK_Set;
000076  4608              MOV      r0,r1
000078  6d00              LDR      r0,[r0,#0x50]
00007a  f0400080          ORR      r0,r0,#0x80
00007e  6508              STR      r0,[r1,#0x50]
;;;380    #endif /* STM32F10X_XL */
;;;381    }
000080  4770              BX       lr
;;;382    
                          ENDP

                  FLASH_LockBank1 PROC
;;;391      */
;;;392    void FLASH_LockBank1(void)
000082  48df              LDR      r0,|L1.1024|
;;;393    {
;;;394      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;395      FLASH->CR |= CR_LOCK_Set;
000084  6900              LDR      r0,[r0,#0x10]
000086  f0400080          ORR      r0,r0,#0x80
00008a  49dd              LDR      r1,|L1.1024|
00008c  6108              STR      r0,[r1,#0x10]
;;;396    }
00008e  4770              BX       lr
;;;397    
                          ENDP

                  FLASH_LockBank2 PROC
;;;404      */
;;;405    void FLASH_LockBank2(void)
000090  48db              LDR      r0,|L1.1024|
;;;406    {
;;;407      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;408      FLASH->CR2 |= CR_LOCK_Set;
000092  6d00              LDR      r0,[r0,#0x50]
000094  f0400080          ORR      r0,r0,#0x80
000098  49d9              LDR      r1,|L1.1024|
00009a  6508              STR      r0,[r1,#0x50]
;;;409    }
00009c  4770              BX       lr
;;;410    #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_GetBank2Status PROC
;;;1552     */
;;;1553   FLASH_Status FLASH_GetBank2Status(void)
00009e  2004              MOVS     r0,#4
;;;1554   {
;;;1555     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1556     
;;;1557     if((FLASH->SR2 & (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) 
0000a0  49d7              LDR      r1,|L1.1024|
0000a2  6cc9              LDR      r1,[r1,#0x4c]
0000a4  f0010101          AND      r1,r1,#1
0000a8  b109              CBZ      r1,|L1.174|
;;;1558     {
;;;1559       flashstatus = FLASH_BUSY;
0000aa  2001              MOVS     r0,#1
0000ac  e00e              B        |L1.204|
                  |L1.174|
;;;1560     }
;;;1561     else 
;;;1562     {  
;;;1563       if((FLASH->SR2 & (FLASH_FLAG_BANK2_PGERR & 0x7FFFFFFF)) != 0)
0000ae  49d4              LDR      r1,|L1.1024|
0000b0  6cc9              LDR      r1,[r1,#0x4c]
0000b2  f0010104          AND      r1,r1,#4
0000b6  b109              CBZ      r1,|L1.188|
;;;1564       { 
;;;1565         flashstatus = FLASH_ERROR_PG;
0000b8  2002              MOVS     r0,#2
0000ba  e007              B        |L1.204|
                  |L1.188|
;;;1566       }
;;;1567       else 
;;;1568       {
;;;1569         if((FLASH->SR2 & (FLASH_FLAG_BANK2_WRPRTERR & 0x7FFFFFFF)) != 0 )
0000bc  49d0              LDR      r1,|L1.1024|
0000be  6cc9              LDR      r1,[r1,#0x4c]
0000c0  f0010110          AND      r1,r1,#0x10
0000c4  b109              CBZ      r1,|L1.202|
;;;1570         {
;;;1571           flashstatus = FLASH_ERROR_WRP;
0000c6  2003              MOVS     r0,#3
0000c8  e000              B        |L1.204|
                  |L1.202|
;;;1572         }
;;;1573         else
;;;1574         {
;;;1575           flashstatus = FLASH_COMPLETE;
0000ca  2004              MOVS     r0,#4
                  |L1.204|
;;;1576         }
;;;1577       }
;;;1578     }
;;;1579     /* Return the Flash Status */
;;;1580     return flashstatus;
;;;1581   }
0000cc  4770              BX       lr
;;;1582   #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_WaitForLastBank2Operation PROC
;;;1650     */
;;;1651   FLASH_Status FLASH_WaitForLastBank2Operation(uint32_t Timeout)
0000ce  b500              PUSH     {lr}
;;;1652   { 
0000d0  4602              MOV      r2,r0
;;;1653     FLASH_Status status = FLASH_COMPLETE;
0000d2  2304              MOVS     r3,#4
;;;1654      
;;;1655     /* Check for the Flash Status */
;;;1656     status = FLASH_GetBank2Status();
0000d4  f7fffffe          BL       FLASH_GetBank2Status
0000d8  4603              MOV      r3,r0
;;;1657     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1658     while((status == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) && (Timeout != 0x00))
0000da  e003              B        |L1.228|
                  |L1.220|
;;;1659     {
;;;1660       status = FLASH_GetBank2Status();
0000dc  f7fffffe          BL       FLASH_GetBank2Status
0000e0  4603              MOV      r3,r0
;;;1661       Timeout--;
0000e2  1e52              SUBS     r2,r2,#1
                  |L1.228|
0000e4  2b01              CMP      r3,#1                 ;1658
0000e6  d101              BNE      |L1.236|
0000e8  2a00              CMP      r2,#0                 ;1658
0000ea  d1f7              BNE      |L1.220|
                  |L1.236|
;;;1662     }
;;;1663     if(Timeout == 0x00 )
0000ec  b902              CBNZ     r2,|L1.240|
;;;1664     {
;;;1665       status = FLASH_TIMEOUT;
0000ee  2305              MOVS     r3,#5
                  |L1.240|
;;;1666     }
;;;1667     /* Return the operation status */
;;;1668     return status;
0000f0  4618              MOV      r0,r3
;;;1669   }
0000f2  bd00              POP      {pc}
;;;1670   #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_GetBank1Status PROC
;;;1514     */
;;;1515   FLASH_Status FLASH_GetBank1Status(void)
0000f4  2004              MOVS     r0,#4
;;;1516   {
;;;1517     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1518     
;;;1519     if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
0000f6  49c2              LDR      r1,|L1.1024|
0000f8  68c9              LDR      r1,[r1,#0xc]
0000fa  f0010101          AND      r1,r1,#1
0000fe  b109              CBZ      r1,|L1.260|
;;;1520     {
;;;1521       flashstatus = FLASH_BUSY;
000100  2001              MOVS     r0,#1
000102  e00e              B        |L1.290|
                  |L1.260|
;;;1522     }
;;;1523     else 
;;;1524     {  
;;;1525       if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
000104  49be              LDR      r1,|L1.1024|
000106  68c9              LDR      r1,[r1,#0xc]
000108  f0010104          AND      r1,r1,#4
00010c  b109              CBZ      r1,|L1.274|
;;;1526       { 
;;;1527         flashstatus = FLASH_ERROR_PG;
00010e  2002              MOVS     r0,#2
000110  e007              B        |L1.290|
                  |L1.274|
;;;1528       }
;;;1529       else 
;;;1530       {
;;;1531         if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
000112  49bb              LDR      r1,|L1.1024|
000114  68c9              LDR      r1,[r1,#0xc]
000116  f0010110          AND      r1,r1,#0x10
00011a  b109              CBZ      r1,|L1.288|
;;;1532         {
;;;1533           flashstatus = FLASH_ERROR_WRP;
00011c  2003              MOVS     r0,#3
00011e  e000              B        |L1.290|
                  |L1.288|
;;;1534         }
;;;1535         else
;;;1536         {
;;;1537           flashstatus = FLASH_COMPLETE;
000120  2004              MOVS     r0,#4
                  |L1.290|
;;;1538         }
;;;1539       }
;;;1540     }
;;;1541     /* Return the Flash Status */
;;;1542     return flashstatus;
;;;1543   }
000122  4770              BX       lr
;;;1544   
                          ENDP

                  FLASH_WaitForLastBank1Operation PROC
;;;1622     */
;;;1623   FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
000124  b500              PUSH     {lr}
;;;1624   { 
000126  4602              MOV      r2,r0
;;;1625     FLASH_Status status = FLASH_COMPLETE;
000128  2304              MOVS     r3,#4
;;;1626      
;;;1627     /* Check for the Flash Status */
;;;1628     status = FLASH_GetBank1Status();
00012a  f7fffffe          BL       FLASH_GetBank1Status
00012e  4603              MOV      r3,r0
;;;1629     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1630     while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
000130  e003              B        |L1.314|
                  |L1.306|
;;;1631     {
;;;1632       status = FLASH_GetBank1Status();
000132  f7fffffe          BL       FLASH_GetBank1Status
000136  4603              MOV      r3,r0
;;;1633       Timeout--;
000138  1e52              SUBS     r2,r2,#1
                  |L1.314|
00013a  2b01              CMP      r3,#1                 ;1630
00013c  d101              BNE      |L1.322|
00013e  2a00              CMP      r2,#0                 ;1630
000140  d1f7              BNE      |L1.306|
                  |L1.322|
;;;1634     }
;;;1635     if(Timeout == 0x00 )
000142  b902              CBNZ     r2,|L1.326|
;;;1636     {
;;;1637       status = FLASH_TIMEOUT;
000144  2305              MOVS     r3,#5
                  |L1.326|
;;;1638     }
;;;1639     /* Return the operation status */
;;;1640     return status;
000146  4618              MOV      r0,r3
;;;1641   }
000148  bd00              POP      {pc}
;;;1642   
                          ENDP

                  FLASH_ErasePage PROC
;;;418      */
;;;419    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
00014a  b530              PUSH     {r4,r5,lr}
;;;420    {
00014c  4604              MOV      r4,r0
;;;421      FLASH_Status status = FLASH_COMPLETE;
00014e  2504              MOVS     r5,#4
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FLASH_ADDRESS(Page_Address));
;;;424    
;;;425    #ifdef STM32F10X_XL
;;;426      if(Page_Address < FLASH_BANK1_END_ADDRESS)  
000150  48ae              LDR      r0,|L1.1036|
000152  4284              CMP      r4,r0
000154  d21f              BCS      |L1.406|
;;;427      {
;;;428        /* Wait for last operation to be completed */
;;;429        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000156  f44f2030          MOV      r0,#0xb0000
00015a  f7fffffe          BL       FLASH_WaitForLastBank1Operation
00015e  4605              MOV      r5,r0
;;;430        if(status == FLASH_COMPLETE)
000160  2d04              CMP      r5,#4
000162  d137              BNE      |L1.468|
;;;431        { 
;;;432          /* if the previous operation is completed, proceed to erase the page */
;;;433          FLASH->CR|= CR_PER_Set;
000164  48a6              LDR      r0,|L1.1024|
000166  6900              LDR      r0,[r0,#0x10]
000168  f0400002          ORR      r0,r0,#2
00016c  49a4              LDR      r1,|L1.1024|
00016e  6108              STR      r0,[r1,#0x10]
;;;434          FLASH->AR = Page_Address; 
000170  4608              MOV      r0,r1
000172  6144              STR      r4,[r0,#0x14]
;;;435          FLASH->CR|= CR_STRT_Set;
000174  6900              LDR      r0,[r0,#0x10]
000176  f0400040          ORR      r0,r0,#0x40
00017a  6108              STR      r0,[r1,#0x10]
;;;436        
;;;437          /* Wait for last operation to be completed */
;;;438          status = FLASH_WaitForLastBank1Operation(EraseTimeout);
00017c  f44f2030          MOV      r0,#0xb0000
000180  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000184  4605              MOV      r5,r0
;;;439    
;;;440          /* Disable the PER Bit */
;;;441          FLASH->CR &= CR_PER_Reset;
000186  489e              LDR      r0,|L1.1024|
000188  6900              LDR      r0,[r0,#0x10]
00018a  f64171fd          MOV      r1,#0x1ffd
00018e  4008              ANDS     r0,r0,r1
000190  499b              LDR      r1,|L1.1024|
000192  6108              STR      r0,[r1,#0x10]
000194  e01e              B        |L1.468|
                  |L1.406|
;;;442        }
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Wait for last operation to be completed */
;;;447        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
000196  f44f2030          MOV      r0,#0xb0000
00019a  f7fffffe          BL       FLASH_WaitForLastBank2Operation
00019e  4605              MOV      r5,r0
;;;448        if(status == FLASH_COMPLETE)
0001a0  2d04              CMP      r5,#4
0001a2  d117              BNE      |L1.468|
;;;449        { 
;;;450          /* if the previous operation is completed, proceed to erase the page */
;;;451          FLASH->CR2|= CR_PER_Set;
0001a4  4896              LDR      r0,|L1.1024|
0001a6  6d00              LDR      r0,[r0,#0x50]
0001a8  f0400002          ORR      r0,r0,#2
0001ac  4994              LDR      r1,|L1.1024|
0001ae  6508              STR      r0,[r1,#0x50]
;;;452          FLASH->AR2 = Page_Address; 
0001b0  4608              MOV      r0,r1
0001b2  6544              STR      r4,[r0,#0x54]
;;;453          FLASH->CR2|= CR_STRT_Set;
0001b4  6d00              LDR      r0,[r0,#0x50]
0001b6  f0400040          ORR      r0,r0,#0x40
0001ba  6508              STR      r0,[r1,#0x50]
;;;454        
;;;455          /* Wait for last operation to be completed */
;;;456          status = FLASH_WaitForLastBank2Operation(EraseTimeout);
0001bc  f44f2030          MOV      r0,#0xb0000
0001c0  f7fffffe          BL       FLASH_WaitForLastBank2Operation
0001c4  4605              MOV      r5,r0
;;;457          
;;;458          /* Disable the PER Bit */
;;;459          FLASH->CR2 &= CR_PER_Reset;
0001c6  488e              LDR      r0,|L1.1024|
0001c8  6d00              LDR      r0,[r0,#0x50]
0001ca  f64171fd          MOV      r1,#0x1ffd
0001ce  4008              ANDS     r0,r0,r1
0001d0  498b              LDR      r1,|L1.1024|
0001d2  6508              STR      r0,[r1,#0x50]
                  |L1.468|
;;;460        }
;;;461      }
;;;462    #else
;;;463      /* Wait for last operation to be completed */
;;;464      status = FLASH_WaitForLastOperation(EraseTimeout);
;;;465      
;;;466      if(status == FLASH_COMPLETE)
;;;467      { 
;;;468        /* if the previous operation is completed, proceed to erase the page */
;;;469        FLASH->CR|= CR_PER_Set;
;;;470        FLASH->AR = Page_Address; 
;;;471        FLASH->CR|= CR_STRT_Set;
;;;472        
;;;473        /* Wait for last operation to be completed */
;;;474        status = FLASH_WaitForLastOperation(EraseTimeout);
;;;475        
;;;476        /* Disable the PER Bit */
;;;477        FLASH->CR &= CR_PER_Reset;
;;;478      }
;;;479    #endif /* STM32F10X_XL */
;;;480    
;;;481      /* Return the Erase Status */
;;;482      return status;
0001d4  4628              MOV      r0,r5
;;;483    }
0001d6  bd30              POP      {r4,r5,pc}
;;;484    
                          ENDP

                  FLASH_EraseAllPages PROC
;;;491      */
;;;492    FLASH_Status FLASH_EraseAllPages(void)
0001d8  b510              PUSH     {r4,lr}
;;;493    {
;;;494      FLASH_Status status = FLASH_COMPLETE;
0001da  2404              MOVS     r4,#4
;;;495    
;;;496    #ifdef STM32F10X_XL
;;;497      /* Wait for last operation to be completed */
;;;498      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
0001dc  f44f2030          MOV      r0,#0xb0000
0001e0  f7fffffe          BL       FLASH_WaitForLastBank1Operation
0001e4  4604              MOV      r4,r0
;;;499      
;;;500      if(status == FLASH_COMPLETE)
0001e6  2c04              CMP      r4,#4
0001e8  d116              BNE      |L1.536|
;;;501      {
;;;502        /* if the previous operation is completed, proceed to erase all pages */
;;;503         FLASH->CR |= CR_MER_Set;
0001ea  4885              LDR      r0,|L1.1024|
0001ec  6900              LDR      r0,[r0,#0x10]
0001ee  f0400004          ORR      r0,r0,#4
0001f2  4983              LDR      r1,|L1.1024|
0001f4  6108              STR      r0,[r1,#0x10]
;;;504         FLASH->CR |= CR_STRT_Set;
0001f6  4608              MOV      r0,r1
0001f8  6900              LDR      r0,[r0,#0x10]
0001fa  f0400040          ORR      r0,r0,#0x40
0001fe  6108              STR      r0,[r1,#0x10]
;;;505        
;;;506        /* Wait for last operation to be completed */
;;;507        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000200  f44f2030          MOV      r0,#0xb0000
000204  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000208  4604              MOV      r4,r0
;;;508        
;;;509        /* Disable the MER Bit */
;;;510        FLASH->CR &= CR_MER_Reset;
00020a  487d              LDR      r0,|L1.1024|
00020c  6900              LDR      r0,[r0,#0x10]
00020e  f64171fb          MOV      r1,#0x1ffb
000212  4008              ANDS     r0,r0,r1
000214  497a              LDR      r1,|L1.1024|
000216  6108              STR      r0,[r1,#0x10]
                  |L1.536|
;;;511      }    
;;;512      if(status == FLASH_COMPLETE)
000218  2c04              CMP      r4,#4
00021a  d116              BNE      |L1.586|
;;;513      {
;;;514        /* if the previous operation is completed, proceed to erase all pages */
;;;515         FLASH->CR2 |= CR_MER_Set;
00021c  4878              LDR      r0,|L1.1024|
00021e  6d00              LDR      r0,[r0,#0x50]
000220  f0400004          ORR      r0,r0,#4
000224  4976              LDR      r1,|L1.1024|
000226  6508              STR      r0,[r1,#0x50]
;;;516         FLASH->CR2 |= CR_STRT_Set;
000228  4608              MOV      r0,r1
00022a  6d00              LDR      r0,[r0,#0x50]
00022c  f0400040          ORR      r0,r0,#0x40
000230  6508              STR      r0,[r1,#0x50]
;;;517        
;;;518        /* Wait for last operation to be completed */
;;;519        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
000232  f44f2030          MOV      r0,#0xb0000
000236  f7fffffe          BL       FLASH_WaitForLastBank2Operation
00023a  4604              MOV      r4,r0
;;;520        
;;;521        /* Disable the MER Bit */
;;;522        FLASH->CR2 &= CR_MER_Reset;
00023c  4870              LDR      r0,|L1.1024|
00023e  6d00              LDR      r0,[r0,#0x50]
000240  f64171fb          MOV      r1,#0x1ffb
000244  4008              ANDS     r0,r0,r1
000246  496e              LDR      r1,|L1.1024|
000248  6508              STR      r0,[r1,#0x50]
                  |L1.586|
;;;523      }
;;;524    #else
;;;525      /* Wait for last operation to be completed */
;;;526      status = FLASH_WaitForLastOperation(EraseTimeout);
;;;527      if(status == FLASH_COMPLETE)
;;;528      {
;;;529        /* if the previous operation is completed, proceed to erase all pages */
;;;530         FLASH->CR |= CR_MER_Set;
;;;531         FLASH->CR |= CR_STRT_Set;
;;;532        
;;;533        /* Wait for last operation to be completed */
;;;534        status = FLASH_WaitForLastOperation(EraseTimeout);
;;;535    
;;;536        /* Disable the MER Bit */
;;;537        FLASH->CR &= CR_MER_Reset;
;;;538      }
;;;539    #endif /* STM32F10X_XL */
;;;540    
;;;541      /* Return the Erase Status */
;;;542      return status;
00024a  4620              MOV      r0,r4
;;;543    }
00024c  bd10              POP      {r4,pc}
;;;544    
                          ENDP

                  FLASH_EraseAllBank1Pages PROC
;;;554      */
;;;555    FLASH_Status FLASH_EraseAllBank1Pages(void)
00024e  b510              PUSH     {r4,lr}
;;;556    {
;;;557      FLASH_Status status = FLASH_COMPLETE;
000250  2404              MOVS     r4,#4
;;;558      /* Wait for last operation to be completed */
;;;559      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000252  f44f2030          MOV      r0,#0xb0000
000256  f7fffffe          BL       FLASH_WaitForLastBank1Operation
00025a  4604              MOV      r4,r0
;;;560      
;;;561      if(status == FLASH_COMPLETE)
00025c  2c04              CMP      r4,#4
00025e  d116              BNE      |L1.654|
;;;562      {
;;;563        /* if the previous operation is completed, proceed to erase all pages */
;;;564         FLASH->CR |= CR_MER_Set;
000260  4867              LDR      r0,|L1.1024|
000262  6900              LDR      r0,[r0,#0x10]
000264  f0400004          ORR      r0,r0,#4
000268  4965              LDR      r1,|L1.1024|
00026a  6108              STR      r0,[r1,#0x10]
;;;565         FLASH->CR |= CR_STRT_Set;
00026c  4608              MOV      r0,r1
00026e  6900              LDR      r0,[r0,#0x10]
000270  f0400040          ORR      r0,r0,#0x40
000274  6108              STR      r0,[r1,#0x10]
;;;566        
;;;567        /* Wait for last operation to be completed */
;;;568        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
000276  f44f2030          MOV      r0,#0xb0000
00027a  f7fffffe          BL       FLASH_WaitForLastBank1Operation
00027e  4604              MOV      r4,r0
;;;569        
;;;570        /* Disable the MER Bit */
;;;571        FLASH->CR &= CR_MER_Reset;
000280  485f              LDR      r0,|L1.1024|
000282  6900              LDR      r0,[r0,#0x10]
000284  f64171fb          MOV      r1,#0x1ffb
000288  4008              ANDS     r0,r0,r1
00028a  495d              LDR      r1,|L1.1024|
00028c  6108              STR      r0,[r1,#0x10]
                  |L1.654|
;;;572      }    
;;;573      /* Return the Erase Status */
;;;574      return status;
00028e  4620              MOV      r0,r4
;;;575    }
000290  bd10              POP      {r4,pc}
;;;576    
                          ENDP

                  FLASH_EraseAllBank2Pages PROC
;;;584      */
;;;585    FLASH_Status FLASH_EraseAllBank2Pages(void)
000292  b510              PUSH     {r4,lr}
;;;586    {
;;;587      FLASH_Status status = FLASH_COMPLETE;
000294  2404              MOVS     r4,#4
;;;588      /* Wait for last operation to be completed */
;;;589      status = FLASH_WaitForLastBank2Operation(EraseTimeout);
000296  f44f2030          MOV      r0,#0xb0000
00029a  f7fffffe          BL       FLASH_WaitForLastBank2Operation
00029e  4604              MOV      r4,r0
;;;590      
;;;591      if(status == FLASH_COMPLETE)
0002a0  2c04              CMP      r4,#4
0002a2  d116              BNE      |L1.722|
;;;592      {
;;;593        /* if the previous operation is completed, proceed to erase all pages */
;;;594         FLASH->CR2 |= CR_MER_Set;
0002a4  4856              LDR      r0,|L1.1024|
0002a6  6d00              LDR      r0,[r0,#0x50]
0002a8  f0400004          ORR      r0,r0,#4
0002ac  4954              LDR      r1,|L1.1024|
0002ae  6508              STR      r0,[r1,#0x50]
;;;595         FLASH->CR2 |= CR_STRT_Set;
0002b0  4608              MOV      r0,r1
0002b2  6d00              LDR      r0,[r0,#0x50]
0002b4  f0400040          ORR      r0,r0,#0x40
0002b8  6508              STR      r0,[r1,#0x50]
;;;596        
;;;597        /* Wait for last operation to be completed */
;;;598        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
0002ba  f44f2030          MOV      r0,#0xb0000
0002be  f7fffffe          BL       FLASH_WaitForLastBank2Operation
0002c2  4604              MOV      r4,r0
;;;599    
;;;600        /* Disable the MER Bit */
;;;601        FLASH->CR2 &= CR_MER_Reset;
0002c4  484e              LDR      r0,|L1.1024|
0002c6  6d00              LDR      r0,[r0,#0x50]
0002c8  f64171fb          MOV      r1,#0x1ffb
0002cc  4008              ANDS     r0,r0,r1
0002ce  494c              LDR      r1,|L1.1024|
0002d0  6508              STR      r0,[r1,#0x50]
                  |L1.722|
;;;602      }    
;;;603      /* Return the Erase Status */
;;;604      return status;
0002d2  4620              MOV      r0,r4
;;;605    }
0002d4  bd10              POP      {r4,pc}
;;;606    #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1594     */
;;;1595   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
0002d6  b500              PUSH     {lr}
;;;1596   { 
0002d8  4602              MOV      r2,r0
;;;1597     FLASH_Status status = FLASH_COMPLETE;
0002da  2304              MOVS     r3,#4
;;;1598      
;;;1599     /* Check for the Flash Status */
;;;1600     status = FLASH_GetBank1Status();
0002dc  f7fffffe          BL       FLASH_GetBank1Status
0002e0  4603              MOV      r3,r0
;;;1601     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1602     while((status == FLASH_BUSY) && (Timeout != 0x00))
0002e2  e003              B        |L1.748|
                  |L1.740|
;;;1603     {
;;;1604       status = FLASH_GetBank1Status();
0002e4  f7fffffe          BL       FLASH_GetBank1Status
0002e8  4603              MOV      r3,r0
;;;1605       Timeout--;
0002ea  1e52              SUBS     r2,r2,#1
                  |L1.748|
0002ec  2b01              CMP      r3,#1                 ;1602
0002ee  d101              BNE      |L1.756|
0002f0  2a00              CMP      r2,#0                 ;1602
0002f2  d1f7              BNE      |L1.740|
                  |L1.756|
;;;1606     }
;;;1607     if(Timeout == 0x00 )
0002f4  b902              CBNZ     r2,|L1.760|
;;;1608     {
;;;1609       status = FLASH_TIMEOUT;
0002f6  2305              MOVS     r3,#5
                  |L1.760|
;;;1610     }
;;;1611     /* Return the operation status */
;;;1612     return status;
0002f8  4618              MOV      r0,r3
;;;1613   }
0002fa  bd00              POP      {pc}
;;;1614   
                          ENDP

                  FLASH_GetReadOutProtectionStatus PROC
;;;1239     */
;;;1240   FlagStatus FLASH_GetReadOutProtectionStatus(void)
0002fc  2000              MOVS     r0,#0
;;;1241   {
;;;1242     FlagStatus readoutstatus = RESET;
;;;1243     if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
0002fe  4940              LDR      r1,|L1.1024|
000300  69c9              LDR      r1,[r1,#0x1c]
000302  f0010102          AND      r1,r1,#2
000306  b109              CBZ      r1,|L1.780|
;;;1244     {
;;;1245       readoutstatus = SET;
000308  2001              MOVS     r0,#1
00030a  e000              B        |L1.782|
                  |L1.780|
;;;1246     }
;;;1247     else
;;;1248     {
;;;1249       readoutstatus = RESET;
00030c  2000              MOVS     r0,#0
                  |L1.782|
;;;1250     }
;;;1251     return readoutstatus;
;;;1252   }
00030e  4770              BX       lr
;;;1253   
                          ENDP

                  FLASH_EraseOptionBytes PROC
;;;615      */
;;;616    FLASH_Status FLASH_EraseOptionBytes(void)
000310  b530              PUSH     {r4,r5,lr}
;;;617    {
;;;618      uint16_t rdptmp = RDP_Key;
000312  25a5              MOVS     r5,#0xa5
;;;619    
;;;620      FLASH_Status status = FLASH_COMPLETE;
000314  2404              MOVS     r4,#4
;;;621    
;;;622      /* Get the actual read protection Option Byte value */ 
;;;623      if(FLASH_GetReadOutProtectionStatus() != RESET)
000316  f7fffffe          BL       FLASH_GetReadOutProtectionStatus
00031a  b100              CBZ      r0,|L1.798|
;;;624      {
;;;625        rdptmp = 0x00;  
00031c  2500              MOVS     r5,#0
                  |L1.798|
;;;626      }
;;;627    
;;;628      /* Wait for last operation to be completed */
;;;629      status = FLASH_WaitForLastOperation(EraseTimeout);
00031e  f44f2030          MOV      r0,#0xb0000
000322  f7fffffe          BL       FLASH_WaitForLastOperation
000326  4604              MOV      r4,r0
;;;630      if(status == FLASH_COMPLETE)
000328  2c04              CMP      r4,#4
00032a  d13a              BNE      |L1.930|
;;;631      {
;;;632        /* Authorize the small information block programming */
;;;633        FLASH->OPTKEYR = FLASH_KEY1;
00032c  4835              LDR      r0,|L1.1028|
00032e  4934              LDR      r1,|L1.1024|
000330  6088              STR      r0,[r1,#8]
;;;634        FLASH->OPTKEYR = FLASH_KEY2;
000332  4835              LDR      r0,|L1.1032|
000334  6088              STR      r0,[r1,#8]
;;;635        
;;;636        /* if the previous operation is completed, proceed to erase the option bytes */
;;;637        FLASH->CR |= CR_OPTER_Set;
000336  4608              MOV      r0,r1
000338  6900              LDR      r0,[r0,#0x10]
00033a  f0400020          ORR      r0,r0,#0x20
00033e  6108              STR      r0,[r1,#0x10]
;;;638        FLASH->CR |= CR_STRT_Set;
000340  4608              MOV      r0,r1
000342  6900              LDR      r0,[r0,#0x10]
000344  f0400040          ORR      r0,r0,#0x40
000348  6108              STR      r0,[r1,#0x10]
;;;639        /* Wait for last operation to be completed */
;;;640        status = FLASH_WaitForLastOperation(EraseTimeout);
00034a  f44f2030          MOV      r0,#0xb0000
00034e  f7fffffe          BL       FLASH_WaitForLastOperation
000352  4604              MOV      r4,r0
;;;641        
;;;642        if(status == FLASH_COMPLETE)
000354  2c04              CMP      r4,#4
000356  d11b              BNE      |L1.912|
;;;643        {
;;;644          /* if the erase operation is completed, disable the OPTER Bit */
;;;645          FLASH->CR &= CR_OPTER_Reset;
000358  4829              LDR      r0,|L1.1024|
00035a  6900              LDR      r0,[r0,#0x10]
00035c  f64171df          MOV      r1,#0x1fdf
000360  4008              ANDS     r0,r0,r1
000362  4927              LDR      r1,|L1.1024|
000364  6108              STR      r0,[r1,#0x10]
;;;646           
;;;647          /* Enable the Option Bytes Programming operation */
;;;648          FLASH->CR |= CR_OPTPG_Set;
000366  4608              MOV      r0,r1
000368  6900              LDR      r0,[r0,#0x10]
00036a  f0400010          ORR      r0,r0,#0x10
00036e  6108              STR      r0,[r1,#0x10]
;;;649          /* Restore the last read protection Option Byte value */
;;;650          OB->RDP = (uint16_t)rdptmp; 
000370  4827              LDR      r0,|L1.1040|
000372  8005              STRH     r5,[r0,#0]
;;;651          /* Wait for last operation to be completed */
;;;652          status = FLASH_WaitForLastOperation(ProgramTimeout);
000374  02e0              LSLS     r0,r4,#11
000376  f7fffffe          BL       FLASH_WaitForLastOperation
00037a  4604              MOV      r4,r0
;;;653     
;;;654          if(status != FLASH_TIMEOUT)
00037c  2c05              CMP      r4,#5
00037e  d010              BEQ      |L1.930|
;;;655          {
;;;656            /* if the program operation is completed, disable the OPTPG Bit */
;;;657            FLASH->CR &= CR_OPTPG_Reset;
000380  481f              LDR      r0,|L1.1024|
000382  6900              LDR      r0,[r0,#0x10]
000384  f64171ef          MOV      r1,#0x1fef
000388  4008              ANDS     r0,r0,r1
00038a  491d              LDR      r1,|L1.1024|
00038c  6108              STR      r0,[r1,#0x10]
00038e  e008              B        |L1.930|
                  |L1.912|
;;;658          }
;;;659        }
;;;660        else
;;;661        {
;;;662          if (status != FLASH_TIMEOUT)
000390  2c05              CMP      r4,#5
000392  d006              BEQ      |L1.930|
;;;663          {
;;;664            /* Disable the OPTPG Bit */
;;;665            FLASH->CR &= CR_OPTPG_Reset;
000394  481a              LDR      r0,|L1.1024|
000396  6900              LDR      r0,[r0,#0x10]
000398  f64171ef          MOV      r1,#0x1fef
00039c  4008              ANDS     r0,r0,r1
00039e  4918              LDR      r1,|L1.1024|
0003a0  6108              STR      r0,[r1,#0x10]
                  |L1.930|
;;;666          }
;;;667        }  
;;;668      }
;;;669      /* Return the erase status */
;;;670      return status;
0003a2  4620              MOV      r0,r4
;;;671    }
0003a4  bd30              POP      {r4,r5,pc}
;;;672    
                          ENDP

                  FLASH_ProgramWord PROC
;;;680      */
;;;681    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
0003a6  b578              PUSH     {r3-r6,lr}
;;;682    {
0003a8  4604              MOV      r4,r0
0003aa  460d              MOV      r5,r1
;;;683      FLASH_Status status = FLASH_COMPLETE;
0003ac  2604              MOVS     r6,#4
;;;684      __IO uint32_t tmp = 0;
0003ae  2000              MOVS     r0,#0
0003b0  9000              STR      r0,[sp,#0]
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_FLASH_ADDRESS(Address));
;;;688    
;;;689    #ifdef STM32F10X_XL
;;;690      if(Address < FLASH_BANK1_END_ADDRESS - 2)
0003b2  4816              LDR      r0,|L1.1036|
0003b4  1e80              SUBS     r0,r0,#2
0003b6  4284              CMP      r4,r0
0003b8  d236              BCS      |L1.1064|
;;;691      { 
;;;692        /* Wait for last operation to be completed */
;;;693        status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
0003ba  02f0              LSLS     r0,r6,#11
0003bc  f7fffffe          BL       FLASH_WaitForLastBank1Operation
0003c0  4606              MOV      r6,r0
;;;694        if(status == FLASH_COMPLETE)
0003c2  2e04              CMP      r6,#4
0003c4  d127              BNE      |L1.1046|
;;;695        {
;;;696          /* if the previous operation is completed, proceed to program the new first 
;;;697            half word */
;;;698          FLASH->CR |= CR_PG_Set;
0003c6  480e              LDR      r0,|L1.1024|
0003c8  6900              LDR      r0,[r0,#0x10]
0003ca  f0400001          ORR      r0,r0,#1
0003ce  490c              LDR      r1,|L1.1024|
0003d0  6108              STR      r0,[r1,#0x10]
;;;699      
;;;700          *(__IO uint16_t*)Address = (uint16_t)Data;
0003d2  8025              STRH     r5,[r4,#0]
;;;701          /* Wait for last operation to be completed */
;;;702          status = FLASH_WaitForLastOperation(ProgramTimeout);
0003d4  02f0              LSLS     r0,r6,#11
0003d6  f7fffffe          BL       FLASH_WaitForLastOperation
0003da  4606              MOV      r6,r0
;;;703     
;;;704          if(status == FLASH_COMPLETE)
0003dc  2e04              CMP      r6,#4
0003de  d11b              BNE      |L1.1048|
;;;705          {
;;;706            /* if the previous operation is completed, proceed to program the new second 
;;;707            half word */
;;;708            tmp = Address + 2;
0003e0  1ca0              ADDS     r0,r4,#2
0003e2  9000              STR      r0,[sp,#0]
;;;709    
;;;710            *(__IO uint16_t*) tmp = Data >> 16;
0003e4  0c28              LSRS     r0,r5,#16
0003e6  9900              LDR      r1,[sp,#0]
0003e8  8008              STRH     r0,[r1,#0]
;;;711        
;;;712            /* Wait for last operation to be completed */
;;;713            status = FLASH_WaitForLastOperation(ProgramTimeout);
0003ea  02f0              LSLS     r0,r6,#11
0003ec  f7fffffe          BL       FLASH_WaitForLastOperation
0003f0  4606              MOV      r6,r0
;;;714            
;;;715            /* Disable the PG Bit */
;;;716            FLASH->CR &= CR_PG_Reset;
0003f2  4803              LDR      r0,|L1.1024|
0003f4  6900              LDR      r0,[r0,#0x10]
0003f6  f64171fe          MOV      r1,#0x1ffe
0003fa  4008              ANDS     r0,r0,r1
0003fc  4900              LDR      r1,|L1.1024|
0003fe  e009              B        |L1.1044|
                  |L1.1024|
                          DCD      0x40022000
                  |L1.1028|
                          DCD      0x45670123
                  |L1.1032|
                          DCD      0xcdef89ab
                  |L1.1036|
                          DCD      0x0807ffff
                  |L1.1040|
                          DCD      0x1ffff800
                  |L1.1044|
000414  6108              STR      r0,[r1,#0x10]
                  |L1.1046|
000416  e07d              B        |L1.1300|
                  |L1.1048|
;;;717          }
;;;718          else
;;;719          {
;;;720            /* Disable the PG Bit */
;;;721            FLASH->CR &= CR_PG_Reset;
000418  48f7              LDR      r0,|L1.2040|
00041a  6900              LDR      r0,[r0,#0x10]
00041c  f64171fe          MOV      r1,#0x1ffe
000420  4008              ANDS     r0,r0,r1
000422  49f5              LDR      r1,|L1.2040|
000424  6108              STR      r0,[r1,#0x10]
000426  e075              B        |L1.1300|
                  |L1.1064|
;;;722           }
;;;723        }
;;;724      }
;;;725      else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
000428  48f4              LDR      r0,|L1.2044|
00042a  4284              CMP      r4,r0
00042c  d146              BNE      |L1.1212|
;;;726      {
;;;727        /* Wait for last operation to be completed */
;;;728        status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
00042e  f44f5000          MOV      r0,#0x2000
000432  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000436  4606              MOV      r6,r0
;;;729    
;;;730        if(status == FLASH_COMPLETE)
000438  2e04              CMP      r6,#4
00043a  d112              BNE      |L1.1122|
;;;731        {
;;;732          /* if the previous operation is completed, proceed to program the new first 
;;;733            half word */
;;;734          FLASH->CR |= CR_PG_Set;
00043c  48ee              LDR      r0,|L1.2040|
00043e  6900              LDR      r0,[r0,#0x10]
000440  f0400001          ORR      r0,r0,#1
000444  49ec              LDR      r1,|L1.2040|
000446  6108              STR      r0,[r1,#0x10]
;;;735      
;;;736          *(__IO uint16_t*)Address = (uint16_t)Data;
000448  8025              STRH     r5,[r4,#0]
;;;737    
;;;738          /* Wait for last operation to be completed */
;;;739          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
00044a  02f0              LSLS     r0,r6,#11
00044c  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000450  4606              MOV      r6,r0
;;;740          
;;;741    	  /* Disable the PG Bit */
;;;742          FLASH->CR &= CR_PG_Reset;
000452  48e9              LDR      r0,|L1.2040|
000454  6900              LDR      r0,[r0,#0x10]
000456  f64171fe          MOV      r1,#0x1ffe
00045a  4008              ANDS     r0,r0,r1
00045c  49e6              LDR      r1,|L1.2040|
00045e  6108              STR      r0,[r1,#0x10]
000460  e006              B        |L1.1136|
                  |L1.1122|
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Disable the PG Bit */
;;;747          FLASH->CR &= CR_PG_Reset;
000462  48e5              LDR      r0,|L1.2040|
000464  6900              LDR      r0,[r0,#0x10]
000466  f64171fe          MOV      r1,#0x1ffe
00046a  4008              ANDS     r0,r0,r1
00046c  49e2              LDR      r1,|L1.2040|
00046e  6108              STR      r0,[r1,#0x10]
                  |L1.1136|
;;;748        }
;;;749    
;;;750        /* Wait for last operation to be completed */
;;;751        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
000470  f44f5000          MOV      r0,#0x2000
000474  f7fffffe          BL       FLASH_WaitForLastBank2Operation
000478  4606              MOV      r6,r0
;;;752    
;;;753        if(status == FLASH_COMPLETE)
00047a  2e04              CMP      r6,#4
00047c  d116              BNE      |L1.1196|
;;;754        {
;;;755          /* if the previous operation is completed, proceed to program the new second 
;;;756          half word */
;;;757          FLASH->CR2 |= CR_PG_Set;
00047e  48de              LDR      r0,|L1.2040|
000480  6d00              LDR      r0,[r0,#0x50]
000482  f0400001          ORR      r0,r0,#1
000486  49dc              LDR      r1,|L1.2040|
000488  6508              STR      r0,[r1,#0x50]
;;;758          tmp = Address + 2;
00048a  1ca0              ADDS     r0,r4,#2
00048c  9000              STR      r0,[sp,#0]
;;;759    
;;;760          *(__IO uint16_t*) tmp = Data >> 16;
00048e  0c28              LSRS     r0,r5,#16
000490  9900              LDR      r1,[sp,#0]
000492  8008              STRH     r0,[r1,#0]
;;;761        
;;;762          /* Wait for last operation to be completed */
;;;763          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
000494  02f0              LSLS     r0,r6,#11
000496  f7fffffe          BL       FLASH_WaitForLastBank2Operation
00049a  4606              MOV      r6,r0
;;;764            
;;;765          /* Disable the PG Bit */
;;;766          FLASH->CR2 &= CR_PG_Reset;
00049c  48d6              LDR      r0,|L1.2040|
00049e  6d00              LDR      r0,[r0,#0x50]
0004a0  f64171fe          MOV      r1,#0x1ffe
0004a4  4008              ANDS     r0,r0,r1
0004a6  49d4              LDR      r1,|L1.2040|
0004a8  6508              STR      r0,[r1,#0x50]
0004aa  e033              B        |L1.1300|
                  |L1.1196|
;;;767        }
;;;768        else
;;;769        {
;;;770          /* Disable the PG Bit */
;;;771          FLASH->CR2 &= CR_PG_Reset;
0004ac  48d2              LDR      r0,|L1.2040|
0004ae  6d00              LDR      r0,[r0,#0x50]
0004b0  f64171fe          MOV      r1,#0x1ffe
0004b4  4008              ANDS     r0,r0,r1
0004b6  49d0              LDR      r1,|L1.2040|
0004b8  6508              STR      r0,[r1,#0x50]
0004ba  e02b              B        |L1.1300|
                  |L1.1212|
;;;772        }
;;;773      }
;;;774      else
;;;775      {
;;;776        /* Wait for last operation to be completed */
;;;777        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
0004bc  f44f5000          MOV      r0,#0x2000
0004c0  f7fffffe          BL       FLASH_WaitForLastBank2Operation
0004c4  4606              MOV      r6,r0
;;;778    
;;;779        if(status == FLASH_COMPLETE)
0004c6  2e04              CMP      r6,#4
0004c8  d124              BNE      |L1.1300|
;;;780        {
;;;781          /* if the previous operation is completed, proceed to program the new first 
;;;782            half word */
;;;783          FLASH->CR2 |= CR_PG_Set;
0004ca  48cb              LDR      r0,|L1.2040|
0004cc  6d00              LDR      r0,[r0,#0x50]
0004ce  f0400001          ORR      r0,r0,#1
0004d2  49c9              LDR      r1,|L1.2040|
0004d4  6508              STR      r0,[r1,#0x50]
;;;784      
;;;785          *(__IO uint16_t*)Address = (uint16_t)Data;
0004d6  8025              STRH     r5,[r4,#0]
;;;786          /* Wait for last operation to be completed */
;;;787          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
0004d8  02f0              LSLS     r0,r6,#11
0004da  f7fffffe          BL       FLASH_WaitForLastBank2Operation
0004de  4606              MOV      r6,r0
;;;788     
;;;789          if(status == FLASH_COMPLETE)
0004e0  2e04              CMP      r6,#4
0004e2  d110              BNE      |L1.1286|
;;;790          {
;;;791            /* if the previous operation is completed, proceed to program the new second 
;;;792            half word */
;;;793            tmp = Address + 2;
0004e4  1ca0              ADDS     r0,r4,#2
0004e6  9000              STR      r0,[sp,#0]
;;;794    
;;;795            *(__IO uint16_t*) tmp = Data >> 16;
0004e8  0c28              LSRS     r0,r5,#16
0004ea  9900              LDR      r1,[sp,#0]
0004ec  8008              STRH     r0,[r1,#0]
;;;796        
;;;797            /* Wait for last operation to be completed */
;;;798            status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
0004ee  02f0              LSLS     r0,r6,#11
0004f0  f7fffffe          BL       FLASH_WaitForLastBank2Operation
0004f4  4606              MOV      r6,r0
;;;799            
;;;800            /* Disable the PG Bit */
;;;801            FLASH->CR2 &= CR_PG_Reset;
0004f6  48c0              LDR      r0,|L1.2040|
0004f8  6d00              LDR      r0,[r0,#0x50]
0004fa  f64171fe          MOV      r1,#0x1ffe
0004fe  4008              ANDS     r0,r0,r1
000500  49bd              LDR      r1,|L1.2040|
000502  6508              STR      r0,[r1,#0x50]
000504  e006              B        |L1.1300|
                  |L1.1286|
;;;802          }
;;;803          else
;;;804          {
;;;805            /* Disable the PG Bit */
;;;806            FLASH->CR2 &= CR_PG_Reset;
000506  48bc              LDR      r0,|L1.2040|
000508  6d00              LDR      r0,[r0,#0x50]
00050a  f64171fe          MOV      r1,#0x1ffe
00050e  4008              ANDS     r0,r0,r1
000510  49b9              LDR      r1,|L1.2040|
000512  6508              STR      r0,[r1,#0x50]
                  |L1.1300|
;;;807          }
;;;808        }
;;;809      }
;;;810    #else
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;813      
;;;814      if(status == FLASH_COMPLETE)
;;;815      {
;;;816        /* if the previous operation is completed, proceed to program the new first 
;;;817        half word */
;;;818        FLASH->CR |= CR_PG_Set;
;;;819      
;;;820        *(__IO uint16_t*)Address = (uint16_t)Data;
;;;821        /* Wait for last operation to be completed */
;;;822        status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;823     
;;;824        if(status == FLASH_COMPLETE)
;;;825        {
;;;826          /* if the previous operation is completed, proceed to program the new second 
;;;827          half word */
;;;828          tmp = Address + 2;
;;;829    
;;;830          *(__IO uint16_t*) tmp = Data >> 16;
;;;831        
;;;832          /* Wait for last operation to be completed */
;;;833          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;834            
;;;835          /* Disable the PG Bit */
;;;836          FLASH->CR &= CR_PG_Reset;
;;;837        }
;;;838        else
;;;839        {
;;;840          /* Disable the PG Bit */
;;;841          FLASH->CR &= CR_PG_Reset;
;;;842        }
;;;843      }         
;;;844    #endif /* STM32F10X_XL */
;;;845       
;;;846      /* Return the Program Status */
;;;847      return status;
000514  4630              MOV      r0,r6
;;;848    }
000516  bd78              POP      {r3-r6,pc}
;;;849    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;857      */
;;;858    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000518  b570              PUSH     {r4-r6,lr}
;;;859    {
00051a  4604              MOV      r4,r0
00051c  460d              MOV      r5,r1
;;;860      FLASH_Status status = FLASH_COMPLETE;
00051e  2604              MOVS     r6,#4
;;;861      /* Check the parameters */
;;;862      assert_param(IS_FLASH_ADDRESS(Address));
;;;863    
;;;864    #ifdef STM32F10X_XL
;;;865      /* Wait for last operation to be completed */
;;;866      status = FLASH_WaitForLastOperation(ProgramTimeout);
000520  02f0              LSLS     r0,r6,#11
000522  f7fffffe          BL       FLASH_WaitForLastOperation
000526  4606              MOV      r6,r0
;;;867      
;;;868      if(Address < FLASH_BANK1_END_ADDRESS)
000528  48b4              LDR      r0,|L1.2044|
00052a  1c40              ADDS     r0,r0,#1
00052c  4284              CMP      r4,r0
00052e  d214              BCS      |L1.1370|
;;;869      {
;;;870        if(status == FLASH_COMPLETE)
000530  2e04              CMP      r6,#4
000532  d126              BNE      |L1.1410|
;;;871        {
;;;872          /* if the previous operation is completed, proceed to program the new data */
;;;873          FLASH->CR |= CR_PG_Set;
000534  48b0              LDR      r0,|L1.2040|
000536  6900              LDR      r0,[r0,#0x10]
000538  f0400001          ORR      r0,r0,#1
00053c  49ae              LDR      r1,|L1.2040|
00053e  6108              STR      r0,[r1,#0x10]
;;;874      
;;;875          *(__IO uint16_t*)Address = Data;
000540  8025              STRH     r5,[r4,#0]
;;;876          /* Wait for last operation to be completed */
;;;877          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
000542  02f0              LSLS     r0,r6,#11
000544  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000548  4606              MOV      r6,r0
;;;878    
;;;879          /* Disable the PG Bit */
;;;880          FLASH->CR &= CR_PG_Reset;
00054a  48ab              LDR      r0,|L1.2040|
00054c  6900              LDR      r0,[r0,#0x10]
00054e  f64171fe          MOV      r1,#0x1ffe
000552  4008              ANDS     r0,r0,r1
000554  49a8              LDR      r1,|L1.2040|
000556  6108              STR      r0,[r1,#0x10]
000558  e013              B        |L1.1410|
                  |L1.1370|
;;;881        }
;;;882      }
;;;883      else
;;;884      {
;;;885        if(status == FLASH_COMPLETE)
00055a  2e04              CMP      r6,#4
00055c  d111              BNE      |L1.1410|
;;;886        {
;;;887          /* if the previous operation is completed, proceed to program the new data */
;;;888          FLASH->CR2 |= CR_PG_Set;
00055e  48a6              LDR      r0,|L1.2040|
000560  6d00              LDR      r0,[r0,#0x50]
000562  f0400001          ORR      r0,r0,#1
000566  49a4              LDR      r1,|L1.2040|
000568  6508              STR      r0,[r1,#0x50]
;;;889      
;;;890          *(__IO uint16_t*)Address = Data;
00056a  8025              STRH     r5,[r4,#0]
;;;891          /* Wait for last operation to be completed */
;;;892          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
00056c  02f0              LSLS     r0,r6,#11
00056e  f7fffffe          BL       FLASH_WaitForLastBank2Operation
000572  4606              MOV      r6,r0
;;;893    
;;;894          /* Disable the PG Bit */
;;;895          FLASH->CR2 &= CR_PG_Reset;
000574  48a0              LDR      r0,|L1.2040|
000576  6d00              LDR      r0,[r0,#0x50]
000578  f64171fe          MOV      r1,#0x1ffe
00057c  4008              ANDS     r0,r0,r1
00057e  499e              LDR      r1,|L1.2040|
000580  6508              STR      r0,[r1,#0x50]
                  |L1.1410|
;;;896        }
;;;897      }
;;;898    #else
;;;899      /* Wait for last operation to be completed */
;;;900      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;901      
;;;902      if(status == FLASH_COMPLETE)
;;;903      {
;;;904        /* if the previous operation is completed, proceed to program the new data */
;;;905        FLASH->CR |= CR_PG_Set;
;;;906      
;;;907        *(__IO uint16_t*)Address = Data;
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;910        
;;;911        /* Disable the PG Bit */
;;;912        FLASH->CR &= CR_PG_Reset;
;;;913      } 
;;;914    #endif  /* STM32F10X_XL */
;;;915      
;;;916      /* Return the Program Status */
;;;917      return status;
000582  4630              MOV      r0,r6
;;;918    }
000584  bd70              POP      {r4-r6,pc}
;;;919    
                          ENDP

                  FLASH_ProgramOptionByteData PROC
;;;928      */
;;;929    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
000586  b570              PUSH     {r4-r6,lr}
;;;930    {
000588  4605              MOV      r5,r0
00058a  460e              MOV      r6,r1
;;;931      FLASH_Status status = FLASH_COMPLETE;
00058c  2404              MOVS     r4,#4
;;;932      /* Check the parameters */
;;;933      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;934      status = FLASH_WaitForLastOperation(ProgramTimeout);
00058e  02e0              LSLS     r0,r4,#11
000590  f7fffffe          BL       FLASH_WaitForLastOperation
000594  4604              MOV      r4,r0
;;;935    
;;;936      if(status == FLASH_COMPLETE)
000596  2c04              CMP      r4,#4
000598  d117              BNE      |L1.1482|
;;;937      {
;;;938        /* Authorize the small information block programming */
;;;939        FLASH->OPTKEYR = FLASH_KEY1;
00059a  4899              LDR      r0,|L1.2048|
00059c  4996              LDR      r1,|L1.2040|
00059e  6088              STR      r0,[r1,#8]
;;;940        FLASH->OPTKEYR = FLASH_KEY2;
0005a0  4898              LDR      r0,|L1.2052|
0005a2  6088              STR      r0,[r1,#8]
;;;941        /* Enables the Option Bytes Programming operation */
;;;942        FLASH->CR |= CR_OPTPG_Set; 
0005a4  4608              MOV      r0,r1
0005a6  6900              LDR      r0,[r0,#0x10]
0005a8  f0400010          ORR      r0,r0,#0x10
0005ac  6108              STR      r0,[r1,#0x10]
;;;943        *(__IO uint16_t*)Address = Data;
0005ae  802e              STRH     r6,[r5,#0]
;;;944        
;;;945        /* Wait for last operation to be completed */
;;;946        status = FLASH_WaitForLastOperation(ProgramTimeout);
0005b0  02e0              LSLS     r0,r4,#11
0005b2  f7fffffe          BL       FLASH_WaitForLastOperation
0005b6  4604              MOV      r4,r0
;;;947        if(status != FLASH_TIMEOUT)
0005b8  2c05              CMP      r4,#5
0005ba  d006              BEQ      |L1.1482|
;;;948        {
;;;949          /* if the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= CR_OPTPG_Reset;
0005bc  488e              LDR      r0,|L1.2040|
0005be  6900              LDR      r0,[r0,#0x10]
0005c0  f64171ef          MOV      r1,#0x1fef
0005c4  4008              ANDS     r0,r0,r1
0005c6  498c              LDR      r1,|L1.2040|
0005c8  6108              STR      r0,[r1,#0x10]
                  |L1.1482|
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
0005ca  4620              MOV      r0,r4
;;;955    }
0005cc  bd70              POP      {r4-r6,pc}
;;;956    
                          ENDP

                  FLASH_EnableWriteProtection PROC
;;;974      */
;;;975    FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
0005ce  e92d43f0          PUSH     {r4-r9,lr}
;;;976    {
0005d2  4604              MOV      r4,r0
;;;977      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
0005d4  f64f76ff          MOV      r6,#0xffff
0005d8  4637              MOV      r7,r6
0005da  46b0              MOV      r8,r6
0005dc  46b1              MOV      r9,r6
;;;978      
;;;979      FLASH_Status status = FLASH_COMPLETE;
0005de  2504              MOVS     r5,#4
;;;980      
;;;981      /* Check the parameters */
;;;982      assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
;;;983      
;;;984      FLASH_Pages = (uint32_t)(~FLASH_Pages);
0005e0  43e4              MVNS     r4,r4
;;;985      WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
0005e2  b2e6              UXTB     r6,r4
;;;986      WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
0005e4  f3c42707          UBFX     r7,r4,#8,#8
;;;987      WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
0005e8  f3c44807          UBFX     r8,r4,#16,#8
;;;988      WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
0005ec  ea4f6914          LSR      r9,r4,#24
;;;989      
;;;990      /* Wait for last operation to be completed */
;;;991      status = FLASH_WaitForLastOperation(ProgramTimeout);
0005f0  02e8              LSLS     r0,r5,#11
0005f2  f7fffffe          BL       FLASH_WaitForLastOperation
0005f6  4605              MOV      r5,r0
;;;992      
;;;993      if(status == FLASH_COMPLETE)
0005f8  2d04              CMP      r5,#4
0005fa  d13f              BNE      |L1.1660|
;;;994      {
;;;995        /* Authorizes the small information block programming */
;;;996        FLASH->OPTKEYR = FLASH_KEY1;
0005fc  4880              LDR      r0,|L1.2048|
0005fe  497e              LDR      r1,|L1.2040|
000600  6088              STR      r0,[r1,#8]
;;;997        FLASH->OPTKEYR = FLASH_KEY2;
000602  4880              LDR      r0,|L1.2052|
000604  6088              STR      r0,[r1,#8]
;;;998        FLASH->CR |= CR_OPTPG_Set;
000606  4608              MOV      r0,r1
000608  6900              LDR      r0,[r0,#0x10]
00060a  f0400010          ORR      r0,r0,#0x10
00060e  6108              STR      r0,[r1,#0x10]
;;;999        if(WRP0_Data != 0xFF)
000610  2eff              CMP      r6,#0xff
000612  d005              BEQ      |L1.1568|
;;;1000       {
;;;1001         OB->WRP0 = WRP0_Data;
000614  487c              LDR      r0,|L1.2056|
000616  8006              STRH     r6,[r0,#0]
;;;1002         
;;;1003         /* Wait for last operation to be completed */
;;;1004         status = FLASH_WaitForLastOperation(ProgramTimeout);
000618  02e8              LSLS     r0,r5,#11
00061a  f7fffffe          BL       FLASH_WaitForLastOperation
00061e  4605              MOV      r5,r0
                  |L1.1568|
;;;1005       }
;;;1006       if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
000620  2d04              CMP      r5,#4
000622  d108              BNE      |L1.1590|
000624  2fff              CMP      r7,#0xff
000626  d006              BEQ      |L1.1590|
;;;1007       {
;;;1008         OB->WRP1 = WRP1_Data;
000628  4877              LDR      r0,|L1.2056|
00062a  1c80              ADDS     r0,r0,#2
00062c  8007              STRH     r7,[r0,#0]
;;;1009         
;;;1010         /* Wait for last operation to be completed */
;;;1011         status = FLASH_WaitForLastOperation(ProgramTimeout);
00062e  02e8              LSLS     r0,r5,#11
000630  f7fffffe          BL       FLASH_WaitForLastOperation
000634  4605              MOV      r5,r0
                  |L1.1590|
;;;1012       }
;;;1013       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
000636  2d04              CMP      r5,#4
000638  d10a              BNE      |L1.1616|
00063a  f1b80fff          CMP      r8,#0xff
00063e  d007              BEQ      |L1.1616|
;;;1014       {
;;;1015         OB->WRP2 = WRP2_Data;
000640  4871              LDR      r0,|L1.2056|
000642  1d00              ADDS     r0,r0,#4
000644  f8a08000          STRH     r8,[r0,#0]
;;;1016         
;;;1017         /* Wait for last operation to be completed */
;;;1018         status = FLASH_WaitForLastOperation(ProgramTimeout);
000648  02e8              LSLS     r0,r5,#11
00064a  f7fffffe          BL       FLASH_WaitForLastOperation
00064e  4605              MOV      r5,r0
                  |L1.1616|
;;;1019       }
;;;1020       
;;;1021       if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
000650  2d04              CMP      r5,#4
000652  d10a              BNE      |L1.1642|
000654  f1b90fff          CMP      r9,#0xff
000658  d007              BEQ      |L1.1642|
;;;1022       {
;;;1023         OB->WRP3 = WRP3_Data;
00065a  486b              LDR      r0,|L1.2056|
00065c  1d80              ADDS     r0,r0,#6
00065e  f8a09000          STRH     r9,[r0,#0]
;;;1024        
;;;1025         /* Wait for last operation to be completed */
;;;1026         status = FLASH_WaitForLastOperation(ProgramTimeout);
000662  02e8              LSLS     r0,r5,#11
000664  f7fffffe          BL       FLASH_WaitForLastOperation
000668  4605              MOV      r5,r0
                  |L1.1642|
;;;1027       }
;;;1028             
;;;1029       if(status != FLASH_TIMEOUT)
00066a  2d05              CMP      r5,#5
00066c  d006              BEQ      |L1.1660|
;;;1030       {
;;;1031         /* if the program operation is completed, disable the OPTPG Bit */
;;;1032         FLASH->CR &= CR_OPTPG_Reset;
00066e  4862              LDR      r0,|L1.2040|
000670  6900              LDR      r0,[r0,#0x10]
000672  f64171ef          MOV      r1,#0x1fef
000676  4008              ANDS     r0,r0,r1
000678  495f              LDR      r1,|L1.2040|
00067a  6108              STR      r0,[r1,#0x10]
                  |L1.1660|
;;;1033       }
;;;1034     } 
;;;1035     /* Return the write protection operation Status */
;;;1036     return status;       
00067c  4628              MOV      r0,r5
;;;1037   }
00067e  e8bd83f0          POP      {r4-r9,pc}
;;;1038   
                          ENDP

                  FLASH_ReadOutProtection PROC
;;;1048     */
;;;1049   FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
000682  b530              PUSH     {r4,r5,lr}
;;;1050   {
000684  4605              MOV      r5,r0
;;;1051     FLASH_Status status = FLASH_COMPLETE;
000686  2404              MOVS     r4,#4
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1054     status = FLASH_WaitForLastOperation(EraseTimeout);
000688  f44f2030          MOV      r0,#0xb0000
00068c  f7fffffe          BL       FLASH_WaitForLastOperation
000690  4604              MOV      r4,r0
;;;1055     if(status == FLASH_COMPLETE)
000692  2c04              CMP      r4,#4
000694  d143              BNE      |L1.1822|
;;;1056     {
;;;1057       /* Authorizes the small information block programming */
;;;1058       FLASH->OPTKEYR = FLASH_KEY1;
000696  485a              LDR      r0,|L1.2048|
000698  4957              LDR      r1,|L1.2040|
00069a  6088              STR      r0,[r1,#8]
;;;1059       FLASH->OPTKEYR = FLASH_KEY2;
00069c  4859              LDR      r0,|L1.2052|
00069e  6088              STR      r0,[r1,#8]
;;;1060       FLASH->CR |= CR_OPTER_Set;
0006a0  4608              MOV      r0,r1
0006a2  6900              LDR      r0,[r0,#0x10]
0006a4  f0400020          ORR      r0,r0,#0x20
0006a8  6108              STR      r0,[r1,#0x10]
;;;1061       FLASH->CR |= CR_STRT_Set;
0006aa  4608              MOV      r0,r1
0006ac  6900              LDR      r0,[r0,#0x10]
0006ae  f0400040          ORR      r0,r0,#0x40
0006b2  6108              STR      r0,[r1,#0x10]
;;;1062       /* Wait for last operation to be completed */
;;;1063       status = FLASH_WaitForLastOperation(EraseTimeout);
0006b4  f44f2030          MOV      r0,#0xb0000
0006b8  f7fffffe          BL       FLASH_WaitForLastOperation
0006bc  4604              MOV      r4,r0
;;;1064       if(status == FLASH_COMPLETE)
0006be  2c04              CMP      r4,#4
0006c0  d124              BNE      |L1.1804|
;;;1065       {
;;;1066         /* if the erase operation is completed, disable the OPTER Bit */
;;;1067         FLASH->CR &= CR_OPTER_Reset;
0006c2  484d              LDR      r0,|L1.2040|
0006c4  6900              LDR      r0,[r0,#0x10]
0006c6  f64171df          MOV      r1,#0x1fdf
0006ca  4008              ANDS     r0,r0,r1
0006cc  494a              LDR      r1,|L1.2040|
0006ce  6108              STR      r0,[r1,#0x10]
;;;1068         /* Enable the Option Bytes Programming operation */
;;;1069         FLASH->CR |= CR_OPTPG_Set; 
0006d0  4608              MOV      r0,r1
0006d2  6900              LDR      r0,[r0,#0x10]
0006d4  f0400010          ORR      r0,r0,#0x10
0006d8  6108              STR      r0,[r1,#0x10]
;;;1070         if(NewState != DISABLE)
0006da  b125              CBZ      r5,|L1.1766|
;;;1071         {
;;;1072           OB->RDP = 0x00;
0006dc  2000              MOVS     r0,#0
0006de  494a              LDR      r1,|L1.2056|
0006e0  3908              SUBS     r1,r1,#8
0006e2  8008              STRH     r0,[r1,#0]
0006e4  e003              B        |L1.1774|
                  |L1.1766|
;;;1073         }
;;;1074         else
;;;1075         {
;;;1076           OB->RDP = RDP_Key;  
0006e6  20a5              MOVS     r0,#0xa5
0006e8  4947              LDR      r1,|L1.2056|
0006ea  3908              SUBS     r1,r1,#8
0006ec  8008              STRH     r0,[r1,#0]
                  |L1.1774|
;;;1077         }
;;;1078         /* Wait for last operation to be completed */
;;;1079         status = FLASH_WaitForLastOperation(EraseTimeout); 
0006ee  f44f2030          MOV      r0,#0xb0000
0006f2  f7fffffe          BL       FLASH_WaitForLastOperation
0006f6  4604              MOV      r4,r0
;;;1080       
;;;1081         if(status != FLASH_TIMEOUT)
0006f8  2c05              CMP      r4,#5
0006fa  d010              BEQ      |L1.1822|
;;;1082         {
;;;1083           /* if the program operation is completed, disable the OPTPG Bit */
;;;1084           FLASH->CR &= CR_OPTPG_Reset;
0006fc  483e              LDR      r0,|L1.2040|
0006fe  6900              LDR      r0,[r0,#0x10]
000700  f64171ef          MOV      r1,#0x1fef
000704  4008              ANDS     r0,r0,r1
000706  493c              LDR      r1,|L1.2040|
000708  6108              STR      r0,[r1,#0x10]
00070a  e008              B        |L1.1822|
                  |L1.1804|
;;;1085         }
;;;1086       }
;;;1087       else 
;;;1088       {
;;;1089         if(status != FLASH_TIMEOUT)
00070c  2c05              CMP      r4,#5
00070e  d006              BEQ      |L1.1822|
;;;1090         {
;;;1091           /* Disable the OPTER Bit */
;;;1092           FLASH->CR &= CR_OPTER_Reset;
000710  4839              LDR      r0,|L1.2040|
000712  6900              LDR      r0,[r0,#0x10]
000714  f64171df          MOV      r1,#0x1fdf
000718  4008              ANDS     r0,r0,r1
00071a  4937              LDR      r1,|L1.2040|
00071c  6108              STR      r0,[r1,#0x10]
                  |L1.1822|
;;;1093         }
;;;1094       }
;;;1095     }
;;;1096     /* Return the protection operation Status */
;;;1097     return status;       
00071e  4620              MOV      r0,r4
;;;1098   }
000720  bd30              POP      {r4,r5,pc}
;;;1099   
                          ENDP

                  FLASH_UserOptionByteConfig PROC
;;;1117     */
;;;1118   FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
000722  b5f0              PUSH     {r4-r7,lr}
;;;1119   {
000724  4605              MOV      r5,r0
000726  460e              MOV      r6,r1
000728  4617              MOV      r7,r2
;;;1120     FLASH_Status status = FLASH_COMPLETE; 
00072a  2404              MOVS     r4,#4
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1124     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1125     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1126   
;;;1127     /* Authorize the small information block programming */
;;;1128     FLASH->OPTKEYR = FLASH_KEY1;
00072c  4834              LDR      r0,|L1.2048|
00072e  4932              LDR      r1,|L1.2040|
000730  6088              STR      r0,[r1,#8]
;;;1129     FLASH->OPTKEYR = FLASH_KEY2;
000732  4834              LDR      r0,|L1.2052|
000734  6088              STR      r0,[r1,#8]
;;;1130     
;;;1131     /* Wait for last operation to be completed */
;;;1132     status = FLASH_WaitForLastOperation(ProgramTimeout);
000736  02e0              LSLS     r0,r4,#11
000738  f7fffffe          BL       FLASH_WaitForLastOperation
00073c  4604              MOV      r4,r0
;;;1133     
;;;1134     if(status == FLASH_COMPLETE)
00073e  2c04              CMP      r4,#4
000740  d119              BNE      |L1.1910|
;;;1135     {  
;;;1136       /* Enable the Option Bytes Programming operation */
;;;1137       FLASH->CR |= CR_OPTPG_Set; 
000742  482d              LDR      r0,|L1.2040|
000744  6900              LDR      r0,[r0,#0x10]
000746  f0400010          ORR      r0,r0,#0x10
00074a  492b              LDR      r1,|L1.2040|
00074c  6108              STR      r0,[r1,#0x10]
;;;1138              
;;;1139       OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
00074e  f04700f8          ORR      r0,r7,#0xf8
000752  4330              ORRS     r0,r0,r6
000754  4328              ORRS     r0,r0,r5
000756  492c              LDR      r1,|L1.2056|
000758  1f89              SUBS     r1,r1,#6
00075a  8008              STRH     r0,[r1,#0]
;;;1140     
;;;1141       /* Wait for last operation to be completed */
;;;1142       status = FLASH_WaitForLastOperation(ProgramTimeout);
00075c  02e0              LSLS     r0,r4,#11
00075e  f7fffffe          BL       FLASH_WaitForLastOperation
000762  4604              MOV      r4,r0
;;;1143       if(status != FLASH_TIMEOUT)
000764  2c05              CMP      r4,#5
000766  d006              BEQ      |L1.1910|
;;;1144       {
;;;1145         /* if the program operation is completed, disable the OPTPG Bit */
;;;1146         FLASH->CR &= CR_OPTPG_Reset;
000768  4823              LDR      r0,|L1.2040|
00076a  6900              LDR      r0,[r0,#0x10]
00076c  f64171ef          MOV      r1,#0x1fef
000770  4008              ANDS     r0,r0,r1
000772  4921              LDR      r1,|L1.2040|
000774  6108              STR      r0,[r1,#0x10]
                  |L1.1910|
;;;1147       }
;;;1148     }    
;;;1149     /* Return the Option Byte program Status */
;;;1150     return status;
000776  4620              MOV      r0,r4
;;;1151   }
000778  bdf0              POP      {r4-r7,pc}
;;;1152   
                          ENDP

                  FLASH_BootConfig PROC
;;;1171     */
;;;1172   FLASH_Status FLASH_BootConfig(uint16_t FLASH_BOOT)
00077a  b530              PUSH     {r4,r5,lr}
;;;1173   { 
00077c  4605              MOV      r5,r0
;;;1174     FLASH_Status status = FLASH_COMPLETE; 
00077e  2404              MOVS     r4,#4
;;;1175     assert_param(IS_FLASH_BOOT(FLASH_BOOT));
;;;1176     /* Authorize the small information block programming */
;;;1177     FLASH->OPTKEYR = FLASH_KEY1;
000780  481f              LDR      r0,|L1.2048|
000782  491d              LDR      r1,|L1.2040|
000784  6088              STR      r0,[r1,#8]
;;;1178     FLASH->OPTKEYR = FLASH_KEY2;
000786  481f              LDR      r0,|L1.2052|
000788  6088              STR      r0,[r1,#8]
;;;1179     
;;;1180     /* Wait for last operation to be completed */
;;;1181     status = FLASH_WaitForLastOperation(ProgramTimeout);
00078a  02e0              LSLS     r0,r4,#11
00078c  f7fffffe          BL       FLASH_WaitForLastOperation
000790  4604              MOV      r4,r0
;;;1182     
;;;1183     if(status == FLASH_COMPLETE)
000792  2c04              CMP      r4,#4
000794  d126              BNE      |L1.2020|
;;;1184     {  
;;;1185       /* Enable the Option Bytes Programming operation */
;;;1186       FLASH->CR |= CR_OPTPG_Set; 
000796  4818              LDR      r0,|L1.2040|
000798  6900              LDR      r0,[r0,#0x10]
00079a  f0400010          ORR      r0,r0,#0x10
00079e  4916              LDR      r1,|L1.2040|
0007a0  6108              STR      r0,[r1,#0x10]
;;;1187   
;;;1188       if(FLASH_BOOT == FLASH_BOOT_Bank1)
0007a2  b945              CBNZ     r5,|L1.1974|
;;;1189       {
;;;1190         OB->USER |= OB_USER_BFB2;
0007a4  4818              LDR      r0,|L1.2056|
0007a6  1f80              SUBS     r0,r0,#6
0007a8  8800              LDRH     r0,[r0,#0]
0007aa  f0400008          ORR      r0,r0,#8
0007ae  4916              LDR      r1,|L1.2056|
0007b0  1f89              SUBS     r1,r1,#6
0007b2  8008              STRH     r0,[r1,#0]
0007b4  e008              B        |L1.1992|
                  |L1.1974|
;;;1191       }
;;;1192       else
;;;1193       {
;;;1194         OB->USER &= (uint16_t)(~(uint16_t)(OB_USER_BFB2));
0007b6  4814              LDR      r0,|L1.2056|
0007b8  1f80              SUBS     r0,r0,#6
0007ba  8800              LDRH     r0,[r0,#0]
0007bc  f64f71f7          MOV      r1,#0xfff7
0007c0  4008              ANDS     r0,r0,r1
0007c2  4911              LDR      r1,|L1.2056|
0007c4  1f89              SUBS     r1,r1,#6
0007c6  8008              STRH     r0,[r1,#0]
                  |L1.1992|
;;;1195       }
;;;1196       /* Wait for last operation to be completed */
;;;1197       status = FLASH_WaitForLastOperation(ProgramTimeout);
0007c8  f44f5000          MOV      r0,#0x2000
0007cc  f7fffffe          BL       FLASH_WaitForLastOperation
0007d0  4604              MOV      r4,r0
;;;1198       if(status != FLASH_TIMEOUT)
0007d2  2c05              CMP      r4,#5
0007d4  d006              BEQ      |L1.2020|
;;;1199       {
;;;1200         /* if the program operation is completed, disable the OPTPG Bit */
;;;1201         FLASH->CR &= CR_OPTPG_Reset;
0007d6  4808              LDR      r0,|L1.2040|
0007d8  6900              LDR      r0,[r0,#0x10]
0007da  f64171ef          MOV      r1,#0x1fef
0007de  4008              ANDS     r0,r0,r1
0007e0  4905              LDR      r1,|L1.2040|
0007e2  6108              STR      r0,[r1,#0x10]
                  |L1.2020|
;;;1202       }
;;;1203     }    
;;;1204     /* Return the Option Byte program Status */
;;;1205     return status;
0007e4  4620              MOV      r0,r4
;;;1206   }
0007e6  bd30              POP      {r4,r5,pc}
;;;1207   #endif /* STM32F10X_XL */
                          ENDP

                  FLASH_GetUserOptionByte PROC
;;;1215     */
;;;1216   uint32_t FLASH_GetUserOptionByte(void)
0007e8  4803              LDR      r0,|L1.2040|
;;;1217   {
;;;1218     /* Return the User Option Byte */
;;;1219     return (uint32_t)(FLASH->OBR >> 2);
0007ea  69c0              LDR      r0,[r0,#0x1c]
0007ec  0880              LSRS     r0,r0,#2
;;;1220   }
0007ee  4770              BX       lr
;;;1221   
                          ENDP

                  FLASH_GetWriteProtectionOptionByte PROC
;;;1227     */
;;;1228   uint32_t FLASH_GetWriteProtectionOptionByte(void)
0007f0  4801              LDR      r0,|L1.2040|
;;;1229   {
;;;1230     /* Return the Flash write protection Register value */
;;;1231     return (uint32_t)(FLASH->WRPR);
0007f2  6a00              LDR      r0,[r0,#0x20]
;;;1232   }
0007f4  4770              BX       lr
0007f6  0000              DCW      0x0000
                  |L1.2040|
                          DCD      0x40022000
                  |L1.2044|
                          DCD      0x0807fffe
                  |L1.2048|
                          DCD      0x45670123
                  |L1.2052|
                          DCD      0xcdef89ab
                  |L1.2056|
                          DCD      0x1ffff808
                          ENDP

                  FLASH_GetPrefetchBufferStatus PROC
;;;1259     */
;;;1260   FlagStatus FLASH_GetPrefetchBufferStatus(void)
00080c  2000              MOVS     r0,#0
;;;1261   {
;;;1262     FlagStatus bitstatus = RESET;
;;;1263     
;;;1264     if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
00080e  4935              LDR      r1,|L1.2276|
000810  6809              LDR      r1,[r1,#0]
000812  f0010120          AND      r1,r1,#0x20
000816  b109              CBZ      r1,|L1.2076|
;;;1265     {
;;;1266       bitstatus = SET;
000818  2001              MOVS     r0,#1
00081a  e000              B        |L1.2078|
                  |L1.2076|
;;;1267     }
;;;1268     else
;;;1269     {
;;;1270       bitstatus = RESET;
00081c  2000              MOVS     r0,#0
                  |L1.2078|
;;;1271     }
;;;1272     /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;1273     return bitstatus; 
;;;1274   }
00081e  4770              BX       lr
;;;1275   
                          ENDP

                  FLASH_ITConfig PROC
;;;1289     */
;;;1290   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000820  f0004200          AND      r2,r0,#0x80000000
;;;1291   {
;;;1292   #ifdef STM32F10X_XL
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1295     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1296   
;;;1297     if((FLASH_IT & 0x80000000) != 0x0)
000824  b182              CBZ      r2,|L1.2120|
;;;1298     {
;;;1299       if(NewState != DISABLE)
000826  b139              CBZ      r1,|L1.2104|
;;;1300       {
;;;1301         /* Enable the interrupt sources */
;;;1302         FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
000828  4a2e              LDR      r2,|L1.2276|
00082a  6d12              LDR      r2,[r2,#0x50]
00082c  f0204300          BIC      r3,r0,#0x80000000
000830  431a              ORRS     r2,r2,r3
000832  4b2c              LDR      r3,|L1.2276|
000834  651a              STR      r2,[r3,#0x50]
000836  e013              B        |L1.2144|
                  |L1.2104|
;;;1303       }
;;;1304       else
;;;1305       {
;;;1306         /* Disable the interrupt sources */
;;;1307         FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
000838  4a2a              LDR      r2,|L1.2276|
00083a  6d12              LDR      r2,[r2,#0x50]
00083c  f0204300          BIC      r3,r0,#0x80000000
000840  439a              BICS     r2,r2,r3
000842  4b28              LDR      r3,|L1.2276|
000844  651a              STR      r2,[r3,#0x50]
000846  e00b              B        |L1.2144|
                  |L1.2120|
;;;1308       }
;;;1309     }
;;;1310     else
;;;1311     {
;;;1312       if(NewState != DISABLE)
000848  b129              CBZ      r1,|L1.2134|
;;;1313       {
;;;1314         /* Enable the interrupt sources */
;;;1315         FLASH->CR |= FLASH_IT;
00084a  4a26              LDR      r2,|L1.2276|
00084c  6912              LDR      r2,[r2,#0x10]
00084e  4302              ORRS     r2,r2,r0
000850  4b24              LDR      r3,|L1.2276|
000852  611a              STR      r2,[r3,#0x10]
000854  e004              B        |L1.2144|
                  |L1.2134|
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Disable the interrupt sources */
;;;1320         FLASH->CR &= ~(uint32_t)FLASH_IT;
000856  4a23              LDR      r2,|L1.2276|
000858  6912              LDR      r2,[r2,#0x10]
00085a  4382              BICS     r2,r2,r0
00085c  4b21              LDR      r3,|L1.2276|
00085e  611a              STR      r2,[r3,#0x10]
                  |L1.2144|
;;;1321       }
;;;1322     }
;;;1323   #else
;;;1324     /* Check the parameters */
;;;1325     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1326     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1327   
;;;1328     if(NewState != DISABLE)
;;;1329     {
;;;1330       /* Enable the interrupt sources */
;;;1331       FLASH->CR |= FLASH_IT;
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* Disable the interrupt sources */
;;;1336       FLASH->CR &= ~(uint32_t)FLASH_IT;
;;;1337     }
;;;1338   #endif /* STM32F10X_XL */
;;;1339   }
000860  4770              BX       lr
;;;1340   
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;1356     */
;;;1357   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000862  4601              MOV      r1,r0
;;;1358   {
;;;1359     FlagStatus bitstatus = RESET;
000864  2000              MOVS     r0,#0
;;;1360   
;;;1361   #ifdef STM32F10X_XL
;;;1362     /* Check the parameters */
;;;1363     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1364     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
000866  2901              CMP      r1,#1
000868  d108              BNE      |L1.2172|
;;;1365     {
;;;1366       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
00086a  4a1e              LDR      r2,|L1.2276|
00086c  69d2              LDR      r2,[r2,#0x1c]
00086e  f0020201          AND      r2,r2,#1
000872  b10a              CBZ      r2,|L1.2168|
;;;1367       {
;;;1368         bitstatus = SET;
000874  2001              MOVS     r0,#1
000876  e013              B        |L1.2208|
                  |L1.2168|
;;;1369       }
;;;1370       else
;;;1371       {
;;;1372         bitstatus = RESET;
000878  2000              MOVS     r0,#0
00087a  e011              B        |L1.2208|
                  |L1.2172|
;;;1373       }
;;;1374     }
;;;1375     else
;;;1376     {
;;;1377       if((FLASH_FLAG & 0x80000000) != 0x0)
00087c  f0014200          AND      r2,r1,#0x80000000
000880  b13a              CBZ      r2,|L1.2194|
;;;1378       {
;;;1379         if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
000882  4a18              LDR      r2,|L1.2276|
000884  6cd2              LDR      r2,[r2,#0x4c]
000886  400a              ANDS     r2,r2,r1
000888  b10a              CBZ      r2,|L1.2190|
;;;1380         {
;;;1381           bitstatus = SET;
00088a  2001              MOVS     r0,#1
00088c  e008              B        |L1.2208|
                  |L1.2190|
;;;1382         }
;;;1383         else
;;;1384         {
;;;1385           bitstatus = RESET;
00088e  2000              MOVS     r0,#0
000890  e006              B        |L1.2208|
                  |L1.2194|
;;;1386         }
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390         if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000892  4a14              LDR      r2,|L1.2276|
000894  68d2              LDR      r2,[r2,#0xc]
000896  400a              ANDS     r2,r2,r1
000898  b10a              CBZ      r2,|L1.2206|
;;;1391         {
;;;1392           bitstatus = SET;
00089a  2001              MOVS     r0,#1
00089c  e000              B        |L1.2208|
                  |L1.2206|
;;;1393         }
;;;1394         else
;;;1395         {
;;;1396           bitstatus = RESET;
00089e  2000              MOVS     r0,#0
                  |L1.2208|
;;;1397         }
;;;1398       }
;;;1399     }
;;;1400   #else
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1403     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1404     {
;;;1405       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
;;;1406       {
;;;1407         bitstatus = SET;
;;;1408       }
;;;1409       else
;;;1410       {
;;;1411         bitstatus = RESET;
;;;1412       }
;;;1413     }
;;;1414     else
;;;1415     {
;;;1416      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
;;;1417       {
;;;1418         bitstatus = SET;
;;;1419       }
;;;1420       else
;;;1421       {
;;;1422         bitstatus = RESET;
;;;1423       }
;;;1424     }
;;;1425   #endif /* STM32F10X_XL */
;;;1426   
;;;1427     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1428     return bitstatus;
;;;1429   }
0008a0  4770              BX       lr
;;;1430   
                          ENDP

                  FLASH_ClearFlag PROC
;;;1442     */
;;;1443   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
0008a2  f0004100          AND      r1,r0,#0x80000000
;;;1444   {
;;;1445   #ifdef STM32F10X_XL
;;;1446     /* Check the parameters */
;;;1447     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1448   
;;;1449     if((FLASH_FLAG & 0x80000000) != 0x0)
0008a6  b111              CBZ      r1,|L1.2222|
;;;1450     {
;;;1451       /* Clear the flags */
;;;1452       FLASH->SR2 = FLASH_FLAG;
0008a8  490e              LDR      r1,|L1.2276|
0008aa  64c8              STR      r0,[r1,#0x4c]
0008ac  e001              B        |L1.2226|
                  |L1.2222|
;;;1453     }
;;;1454     else
;;;1455     {
;;;1456       /* Clear the flags */
;;;1457       FLASH->SR = FLASH_FLAG;
0008ae  490d              LDR      r1,|L1.2276|
0008b0  60c8              STR      r0,[r1,#0xc]
                  |L1.2226|
;;;1458     }  
;;;1459   
;;;1460   #else
;;;1461     /* Check the parameters */
;;;1462     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1463     
;;;1464     /* Clear the flags */
;;;1465     FLASH->SR = FLASH_FLAG;
;;;1466   #endif /* STM32F10X_XL */
;;;1467   }
0008b2  4770              BX       lr
;;;1468   
                          ENDP

                  FLASH_GetStatus PROC
;;;1476     */
;;;1477   FLASH_Status FLASH_GetStatus(void)
0008b4  2004              MOVS     r0,#4
;;;1478   {
;;;1479     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1480     
;;;1481     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
0008b6  490b              LDR      r1,|L1.2276|
0008b8  68c9              LDR      r1,[r1,#0xc]
0008ba  f0010101          AND      r1,r1,#1
0008be  b109              CBZ      r1,|L1.2244|
;;;1482     {
;;;1483       flashstatus = FLASH_BUSY;
0008c0  2001              MOVS     r0,#1
0008c2  e00e              B        |L1.2274|
                  |L1.2244|
;;;1484     }
;;;1485     else 
;;;1486     {  
;;;1487       if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
0008c4  4907              LDR      r1,|L1.2276|
0008c6  68c9              LDR      r1,[r1,#0xc]
0008c8  f0010104          AND      r1,r1,#4
0008cc  b109              CBZ      r1,|L1.2258|
;;;1488       { 
;;;1489         flashstatus = FLASH_ERROR_PG;
0008ce  2002              MOVS     r0,#2
0008d0  e007              B        |L1.2274|
                  |L1.2258|
;;;1490       }
;;;1491       else 
;;;1492       {
;;;1493         if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
0008d2  4904              LDR      r1,|L1.2276|
0008d4  68c9              LDR      r1,[r1,#0xc]
0008d6  f0010110          AND      r1,r1,#0x10
0008da  b109              CBZ      r1,|L1.2272|
;;;1494         {
;;;1495           flashstatus = FLASH_ERROR_WRP;
0008dc  2003              MOVS     r0,#3
0008de  e000              B        |L1.2274|
                  |L1.2272|
;;;1496         }
;;;1497         else
;;;1498         {
;;;1499           flashstatus = FLASH_COMPLETE;
0008e0  2004              MOVS     r0,#4
                  |L1.2274|
;;;1500         }
;;;1501       }
;;;1502     }
;;;1503     /* Return the Flash Status */
;;;1504     return flashstatus;
;;;1505   }
0008e2  4770              BX       lr
;;;1506   
                          ENDP

                  |L1.2276|
                          DCD      0x40022000
