; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stmflash.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\IAP -I..\HARDWARE\STMFLASH -I..\HARDWARE\LED -I..\HARDWARE\Tim2 -I..\HARDWARE\IO -I"E:\TH\RTU\RTU开发程序\IAP-Bootloader V1.0\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_XL -DSTM32F10X_XHD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\stmflash.crf ..\HARDWARE\STMFLASH\stmflash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  STMFLASH_ReadHalfWord PROC
;;;8      //返回值:对应数据.
;;;9      u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;10     {
;;;11     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;12     }
000004  4770              BX       lr
;;;13     #if STM32_FLASH_WREN	//如果使能了写   
                          ENDP

                  STMFLASH_Write_NoCheck PROC
;;;17     //NumToWrite:半字(16位)数   
;;;18     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000006  e92d41f0          PUSH     {r4-r8,lr}
;;;19     { 			 		 
00000a  4605              MOV      r5,r0
00000c  460e              MOV      r6,r1
00000e  4617              MOV      r7,r2
;;;20     	u16 i;
;;;21     	for(i=0;i<NumToWrite;i++)
000010  2400              MOVS     r4,#0
000012  e007              B        |L1.36|
                  |L1.20|
;;;22     	{
;;;23     		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
000014  f8361014          LDRH     r1,[r6,r4,LSL #1]
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       FLASH_ProgramHalfWord
;;;24     	    WriteAddr+=2;//地址增加2.
00001e  1cad              ADDS     r5,r5,#2
000020  1c60              ADDS     r0,r4,#1              ;21
000022  b284              UXTH     r4,r0                 ;21
                  |L1.36|
000024  42bc              CMP      r4,r7                 ;21
000026  dbf5              BLT      |L1.20|
;;;25     	}  
;;;26     } 
000028  e8bd81f0          POP      {r4-r8,pc}
;;;27     //从指定地址开始写入指定长度的数据
                          ENDP

                  STMFLASH_Read PROC
;;;86     //NumToWrite:半字(16位)数
;;;87     void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
00002c  b530              PUSH     {r4,r5,lr}
;;;88     {
00002e  4603              MOV      r3,r0
000030  460c              MOV      r4,r1
000032  4615              MOV      r5,r2
;;;89     	u16 i;
;;;90     	for(i=0;i<NumToRead;i++)
000034  2200              MOVS     r2,#0
000036  e007              B        |L1.72|
                  |L1.56|
;;;91     	{
;;;92     		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
000038  4618              MOV      r0,r3
00003a  f7fffffe          BL       STMFLASH_ReadHalfWord
00003e  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;93     		ReadAddr+=2;//偏移2个字节.	
000042  1c9b              ADDS     r3,r3,#2
000044  1c50              ADDS     r0,r2,#1              ;90
000046  b282              UXTH     r2,r0                 ;90
                  |L1.72|
000048  42aa              CMP      r2,r5                 ;90
00004a  dbf5              BLT      |L1.56|
;;;94     	}
;;;95     }
00004c  bd30              POP      {r4,r5,pc}
;;;96     
                          ENDP

                  STMFLASH_Write PROC
;;;36     u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;37     void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
00004e  e92d5ff0          PUSH     {r4-r12,lr}
;;;38     {
000052  4680              MOV      r8,r0
000054  468a              MOV      r10,r1
000056  4617              MOV      r7,r2
;;;39     	u32 secpos;	   //扇区地址
;;;40     	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;41     	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;42      	u16 i;    
;;;43     	u32 offaddr;   //去掉0X08000000后的地址
;;;44     	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
000058  f1b86f00          CMP      r8,#0x8000000
00005c  d302              BCC      |L1.100|
00005e  483d              LDR      r0,|L1.340|
000060  4580              CMP      r8,r0
000062  d301              BCC      |L1.104|
                  |L1.100|
;;;45     	FLASH_Unlock();						//解锁
;;;46     	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;47     	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;48     	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;49     	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;50     	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;51     	while(1) 
;;;52     	{	
;;;53     		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;54     		for(i=0;i<secremain;i++)//校验数据
;;;55     		{
;;;56     			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;57     		}
;;;58     		if(i<secremain)//需要擦除
;;;59     		{
;;;60     			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;61     			for(i=0;i<secremain;i++)//复制
;;;62     			{
;;;63     				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;64     			}
;;;65     			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;66     		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;67     		if(NumToWrite==secremain)break;//写入结束了
;;;68     		else//写入未结束
;;;69     		{
;;;70     			secpos++;				//扇区地址增1
;;;71     			secoff=0;				//偏移位置为0 	 
;;;72     		   	pBuffer+=secremain;  	//指针偏移
;;;73     			WriteAddr+=secremain;	//写地址偏移	   
;;;74     		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;75     			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;76     			else secremain=NumToWrite;//下一个扇区可以写完了
;;;77     		}	 
;;;78     	};	
;;;79     	FLASH_Lock();//上锁
;;;80     }
000064  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.104|
000068  f7fffffe          BL       FLASH_Unlock
00006c  f1a86b00          SUB      r11,r8,#0x8000000     ;46
000070  ea4f25db          LSR      r5,r11,#11            ;47
000074  f3cb0949          UBFX     r9,r11,#1,#10         ;48
000078  f5c96480          RSB      r4,r9,#0x400          ;49
00007c  42a7              CMP      r7,r4                 ;50
00007e  dc00              BGT      |L1.130|
000080  463c              MOV      r4,r7                 ;50
                  |L1.130|
000082  e04d              B        |L1.288|
                  |L1.132|
000084  f04f6100          MOV      r1,#0x8000000         ;53
000088  eb0120c5          ADD      r0,r1,r5,LSL #11      ;53
00008c  144a              ASRS     r2,r1,#17             ;53
00008e  4932              LDR      r1,|L1.344|
000090  f7fffffe          BL       STMFLASH_Read
000094  2600              MOVS     r6,#0                 ;54
000096  e00b              B        |L1.176|
                  |L1.152|
000098  eb090006          ADD      r0,r9,r6              ;56
00009c  492e              LDR      r1,|L1.344|
00009e  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;56
0000a2  f64f71ff          MOV      r1,#0xffff            ;56
0000a6  4288              CMP      r0,r1                 ;56
0000a8  d000              BEQ      |L1.172|
0000aa  e003              B        |L1.180|
                  |L1.172|
0000ac  1c70              ADDS     r0,r6,#1              ;54
0000ae  b286              UXTH     r6,r0                 ;54
                  |L1.176|
0000b0  42a6              CMP      r6,r4                 ;54
0000b2  dbf1              BLT      |L1.152|
                  |L1.180|
0000b4  bf00              NOP                            ;56
0000b6  42a6              CMP      r6,r4                 ;58
0000b8  da1b              BGE      |L1.242|
0000ba  f04f6100          MOV      r1,#0x8000000         ;60
0000be  eb0120c5          ADD      r0,r1,r5,LSL #11      ;60
0000c2  f7fffffe          BL       FLASH_ErasePage
0000c6  2600              MOVS     r6,#0                 ;61
0000c8  e008              B        |L1.220|
                  |L1.202|
0000ca  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;63
0000ce  eb060109          ADD      r1,r6,r9              ;63
0000d2  4a21              LDR      r2,|L1.344|
0000d4  f8220011          STRH     r0,[r2,r1,LSL #1]     ;63
0000d8  1c70              ADDS     r0,r6,#1              ;61
0000da  b286              UXTH     r6,r0                 ;61
                  |L1.220|
0000dc  42a6              CMP      r6,r4                 ;61
0000de  dbf4              BLT      |L1.202|
0000e0  f04f6100          MOV      r1,#0x8000000         ;65
0000e4  eb0120c5          ADD      r0,r1,r5,LSL #11      ;65
0000e8  144a              ASRS     r2,r1,#17             ;65
0000ea  491b              LDR      r1,|L1.344|
0000ec  f7fffffe          BL       STMFLASH_Write_NoCheck
0000f0  e004              B        |L1.252|
                  |L1.242|
0000f2  4622              MOV      r2,r4                 ;66
0000f4  4651              MOV      r1,r10                ;66
0000f6  4640              MOV      r0,r8                 ;66
0000f8  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L1.252|
0000fc  42a7              CMP      r7,r4                 ;67
0000fe  d100              BNE      |L1.258|
000100  e00f              B        |L1.290|
                  |L1.258|
000102  1c6d              ADDS     r5,r5,#1              ;70
000104  f04f0900          MOV      r9,#0                 ;71
000108  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;72
00010c  44a0              ADD      r8,r8,r4              ;73
00010e  1b38              SUBS     r0,r7,r4              ;74
000110  b287              UXTH     r7,r0                 ;74
000112  f5b76f80          CMP      r7,#0x400             ;75
000116  dd02              BLE      |L1.286|
000118  f44f6480          MOV      r4,#0x400             ;75
00011c  e000              B        |L1.288|
                  |L1.286|
00011e  463c              MOV      r4,r7                 ;76
                  |L1.288|
000120  e7b0              B        |L1.132|
                  |L1.290|
000122  bf00              NOP                            ;67
000124  f7fffffe          BL       FLASH_Lock
000128  bf00              NOP      
00012a  e79b              B        |L1.100|
;;;81     #endif
                          ENDP

                  FLASH_WriteByte PROC
;;;110    
;;;111    void FLASH_WriteByte(uint32_t addr , uint16_t flag)
00012c  b570              PUSH     {r4-r6,lr}
;;;112    {
00012e  4605              MOV      r5,r0
000130  460c              MOV      r4,r1
;;;113    		uint32_t HalfWord;
;;;114    		FLASH_Unlock();
000132  f7fffffe          BL       FLASH_Unlock
;;;115    		FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
000136  2035              MOVS     r0,#0x35
000138  f7fffffe          BL       FLASH_ClearFlag
;;;116    		FLASH_ErasePage(addr);
00013c  4628              MOV      r0,r5
00013e  f7fffffe          BL       FLASH_ErasePage
;;;117    		HalfWord=flag;
000142  4626              MOV      r6,r4
;;;118    		FLASH_ProgramHalfWord(addr, HalfWord);
000144  b2b1              UXTH     r1,r6
000146  4628              MOV      r0,r5
000148  f7fffffe          BL       FLASH_ProgramHalfWord
;;;119    		FLASH_Lock();
00014c  f7fffffe          BL       FLASH_Lock
;;;120    
;;;121    }
000150  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

000152  0000              DCW      0x0000
                  |L1.340|
                          DCD      0x08080000
                  |L1.344|
                          DCD      STMFLASH_BUF

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        2048
